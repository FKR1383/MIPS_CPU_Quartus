// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2024 19:20:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_sample_tst(
	CLOCK,
	Data,
	Register1,
	Register2,
	Register3,
	WriteReg,
	sampler_tx
);
input  CLOCK;
input [7:0] Data;
input [2:0] Register1;
input [2:0] Register2;
input [2:0] Register3;
input  WriteReg;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or Data or Register1 or Register2 or Register3 or WriteReg)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile_vlg_check_tst (
	REGISTER4TEST,
	RegOut1,
	RegOut2,
	sampler_rx
);
input [7:0] REGISTER4TEST;
input [7:0] RegOut1;
input [7:0] RegOut2;
input sampler_rx;

reg [7:0] REGISTER4TEST_expected;
reg [7:0] RegOut1_expected;
reg [7:0] RegOut2_expected;

reg [7:0] REGISTER4TEST_prev;
reg [7:0] RegOut1_prev;
reg [7:0] RegOut2_prev;

reg [7:0] REGISTER4TEST_expected_prev;
reg [7:0] RegOut1_expected_prev;
reg [7:0] RegOut2_expected_prev;

reg [7:0] last_REGISTER4TEST_exp;
reg [7:0] last_RegOut1_exp;
reg [7:0] last_RegOut2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	REGISTER4TEST_prev = REGISTER4TEST;
	RegOut1_prev = RegOut1;
	RegOut2_prev = RegOut2;
end

// update expected /o prevs

always @(trigger)
begin
	REGISTER4TEST_expected_prev = REGISTER4TEST_expected;
	RegOut1_expected_prev = RegOut1_expected;
	RegOut2_expected_prev = RegOut2_expected;
end


// expected REGISTER4TEST[ 7 ]
initial
begin
	REGISTER4TEST_expected[7] = 1'bX;
end 
// expected REGISTER4TEST[ 6 ]
initial
begin
	REGISTER4TEST_expected[6] = 1'bX;
end 
// expected REGISTER4TEST[ 5 ]
initial
begin
	REGISTER4TEST_expected[5] = 1'bX;
end 
// expected REGISTER4TEST[ 4 ]
initial
begin
	REGISTER4TEST_expected[4] = 1'bX;
end 
// expected REGISTER4TEST[ 3 ]
initial
begin
	REGISTER4TEST_expected[3] = 1'bX;
end 
// expected REGISTER4TEST[ 2 ]
initial
begin
	REGISTER4TEST_expected[2] = 1'bX;
end 
// expected REGISTER4TEST[ 1 ]
initial
begin
	REGISTER4TEST_expected[1] = 1'bX;
end 
// expected REGISTER4TEST[ 0 ]
initial
begin
	REGISTER4TEST_expected[0] = 1'bX;
end 
// expected RegOut1[ 7 ]
initial
begin
	RegOut1_expected[7] = 1'bX;
end 
// expected RegOut1[ 6 ]
initial
begin
	RegOut1_expected[6] = 1'bX;
end 
// expected RegOut1[ 5 ]
initial
begin
	RegOut1_expected[5] = 1'bX;
end 
// expected RegOut1[ 4 ]
initial
begin
	RegOut1_expected[4] = 1'bX;
end 
// expected RegOut1[ 3 ]
initial
begin
	RegOut1_expected[3] = 1'bX;
end 
// expected RegOut1[ 2 ]
initial
begin
	RegOut1_expected[2] = 1'bX;
end 
// expected RegOut1[ 1 ]
initial
begin
	RegOut1_expected[1] = 1'bX;
end 
// expected RegOut1[ 0 ]
initial
begin
	RegOut1_expected[0] = 1'bX;
end 
// expected RegOut2[ 7 ]
initial
begin
	RegOut2_expected[7] = 1'bX;
end 
// expected RegOut2[ 6 ]
initial
begin
	RegOut2_expected[6] = 1'bX;
end 
// expected RegOut2[ 5 ]
initial
begin
	RegOut2_expected[5] = 1'bX;
end 
// expected RegOut2[ 4 ]
initial
begin
	RegOut2_expected[4] = 1'bX;
end 
// expected RegOut2[ 3 ]
initial
begin
	RegOut2_expected[3] = 1'bX;
end 
// expected RegOut2[ 2 ]
initial
begin
	RegOut2_expected[2] = 1'bX;
end 
// expected RegOut2[ 1 ]
initial
begin
	RegOut2_expected[1] = 1'bX;
end 
// expected RegOut2[ 0 ]
initial
begin
	RegOut2_expected[0] = 1'bX;
end 
// generate trigger
always @(REGISTER4TEST_expected or REGISTER4TEST or RegOut1_expected or RegOut1 or RegOut2_expected or RegOut2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected REGISTER4TEST = %b | expected RegOut1 = %b | expected RegOut2 = %b | ",REGISTER4TEST_expected_prev,RegOut1_expected_prev,RegOut2_expected_prev);
	$display("| real REGISTER4TEST = %b | real RegOut1 = %b | real RegOut2 = %b | ",REGISTER4TEST_prev,RegOut1_prev,RegOut2_prev);
`endif
	if (
		( REGISTER4TEST_expected_prev[0] !== 1'bx ) && ( REGISTER4TEST_prev[0] !== REGISTER4TEST_expected_prev[0] )
		&& ((REGISTER4TEST_expected_prev[0] !== last_REGISTER4TEST_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[0] = REGISTER4TEST_expected_prev[0];
	end
	if (
		( REGISTER4TEST_expected_prev[1] !== 1'bx ) && ( REGISTER4TEST_prev[1] !== REGISTER4TEST_expected_prev[1] )
		&& ((REGISTER4TEST_expected_prev[1] !== last_REGISTER4TEST_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[1] = REGISTER4TEST_expected_prev[1];
	end
	if (
		( REGISTER4TEST_expected_prev[2] !== 1'bx ) && ( REGISTER4TEST_prev[2] !== REGISTER4TEST_expected_prev[2] )
		&& ((REGISTER4TEST_expected_prev[2] !== last_REGISTER4TEST_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[2] = REGISTER4TEST_expected_prev[2];
	end
	if (
		( REGISTER4TEST_expected_prev[3] !== 1'bx ) && ( REGISTER4TEST_prev[3] !== REGISTER4TEST_expected_prev[3] )
		&& ((REGISTER4TEST_expected_prev[3] !== last_REGISTER4TEST_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[3] = REGISTER4TEST_expected_prev[3];
	end
	if (
		( REGISTER4TEST_expected_prev[4] !== 1'bx ) && ( REGISTER4TEST_prev[4] !== REGISTER4TEST_expected_prev[4] )
		&& ((REGISTER4TEST_expected_prev[4] !== last_REGISTER4TEST_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[4] = REGISTER4TEST_expected_prev[4];
	end
	if (
		( REGISTER4TEST_expected_prev[5] !== 1'bx ) && ( REGISTER4TEST_prev[5] !== REGISTER4TEST_expected_prev[5] )
		&& ((REGISTER4TEST_expected_prev[5] !== last_REGISTER4TEST_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[5] = REGISTER4TEST_expected_prev[5];
	end
	if (
		( REGISTER4TEST_expected_prev[6] !== 1'bx ) && ( REGISTER4TEST_prev[6] !== REGISTER4TEST_expected_prev[6] )
		&& ((REGISTER4TEST_expected_prev[6] !== last_REGISTER4TEST_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[6] = REGISTER4TEST_expected_prev[6];
	end
	if (
		( REGISTER4TEST_expected_prev[7] !== 1'bx ) && ( REGISTER4TEST_prev[7] !== REGISTER4TEST_expected_prev[7] )
		&& ((REGISTER4TEST_expected_prev[7] !== last_REGISTER4TEST_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGISTER4TEST[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGISTER4TEST_expected_prev);
		$display ("     Real value = %b", REGISTER4TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REGISTER4TEST_exp[7] = REGISTER4TEST_expected_prev[7];
	end
	if (
		( RegOut1_expected_prev[0] !== 1'bx ) && ( RegOut1_prev[0] !== RegOut1_expected_prev[0] )
		&& ((RegOut1_expected_prev[0] !== last_RegOut1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[0] = RegOut1_expected_prev[0];
	end
	if (
		( RegOut1_expected_prev[1] !== 1'bx ) && ( RegOut1_prev[1] !== RegOut1_expected_prev[1] )
		&& ((RegOut1_expected_prev[1] !== last_RegOut1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[1] = RegOut1_expected_prev[1];
	end
	if (
		( RegOut1_expected_prev[2] !== 1'bx ) && ( RegOut1_prev[2] !== RegOut1_expected_prev[2] )
		&& ((RegOut1_expected_prev[2] !== last_RegOut1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[2] = RegOut1_expected_prev[2];
	end
	if (
		( RegOut1_expected_prev[3] !== 1'bx ) && ( RegOut1_prev[3] !== RegOut1_expected_prev[3] )
		&& ((RegOut1_expected_prev[3] !== last_RegOut1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[3] = RegOut1_expected_prev[3];
	end
	if (
		( RegOut1_expected_prev[4] !== 1'bx ) && ( RegOut1_prev[4] !== RegOut1_expected_prev[4] )
		&& ((RegOut1_expected_prev[4] !== last_RegOut1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[4] = RegOut1_expected_prev[4];
	end
	if (
		( RegOut1_expected_prev[5] !== 1'bx ) && ( RegOut1_prev[5] !== RegOut1_expected_prev[5] )
		&& ((RegOut1_expected_prev[5] !== last_RegOut1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[5] = RegOut1_expected_prev[5];
	end
	if (
		( RegOut1_expected_prev[6] !== 1'bx ) && ( RegOut1_prev[6] !== RegOut1_expected_prev[6] )
		&& ((RegOut1_expected_prev[6] !== last_RegOut1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[6] = RegOut1_expected_prev[6];
	end
	if (
		( RegOut1_expected_prev[7] !== 1'bx ) && ( RegOut1_prev[7] !== RegOut1_expected_prev[7] )
		&& ((RegOut1_expected_prev[7] !== last_RegOut1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut1_expected_prev);
		$display ("     Real value = %b", RegOut1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegOut1_exp[7] = RegOut1_expected_prev[7];
	end
	if (
		( RegOut2_expected_prev[0] !== 1'bx ) && ( RegOut2_prev[0] !== RegOut2_expected_prev[0] )
		&& ((RegOut2_expected_prev[0] !== last_RegOut2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[0] = RegOut2_expected_prev[0];
	end
	if (
		( RegOut2_expected_prev[1] !== 1'bx ) && ( RegOut2_prev[1] !== RegOut2_expected_prev[1] )
		&& ((RegOut2_expected_prev[1] !== last_RegOut2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[1] = RegOut2_expected_prev[1];
	end
	if (
		( RegOut2_expected_prev[2] !== 1'bx ) && ( RegOut2_prev[2] !== RegOut2_expected_prev[2] )
		&& ((RegOut2_expected_prev[2] !== last_RegOut2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[2] = RegOut2_expected_prev[2];
	end
	if (
		( RegOut2_expected_prev[3] !== 1'bx ) && ( RegOut2_prev[3] !== RegOut2_expected_prev[3] )
		&& ((RegOut2_expected_prev[3] !== last_RegOut2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[3] = RegOut2_expected_prev[3];
	end
	if (
		( RegOut2_expected_prev[4] !== 1'bx ) && ( RegOut2_prev[4] !== RegOut2_expected_prev[4] )
		&& ((RegOut2_expected_prev[4] !== last_RegOut2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[4] = RegOut2_expected_prev[4];
	end
	if (
		( RegOut2_expected_prev[5] !== 1'bx ) && ( RegOut2_prev[5] !== RegOut2_expected_prev[5] )
		&& ((RegOut2_expected_prev[5] !== last_RegOut2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[5] = RegOut2_expected_prev[5];
	end
	if (
		( RegOut2_expected_prev[6] !== 1'bx ) && ( RegOut2_prev[6] !== RegOut2_expected_prev[6] )
		&& ((RegOut2_expected_prev[6] !== last_RegOut2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[6] = RegOut2_expected_prev[6];
	end
	if (
		( RegOut2_expected_prev[7] !== 1'bx ) && ( RegOut2_prev[7] !== RegOut2_expected_prev[7] )
		&& ((RegOut2_expected_prev[7] !== last_RegOut2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegOut2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegOut2_expected_prev);
		$display ("     Real value = %b", RegOut2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegOut2_exp[7] = RegOut2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [7:0] Data;
reg [2:0] Register1;
reg [2:0] Register2;
reg [2:0] Register3;
reg WriteReg;
// wires                                               
wire [7:0] REGISTER4TEST;
wire [7:0] RegOut1;
wire [7:0] RegOut2;

wire sampler;                             

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.Data(Data),
	.Register1(Register1),
	.Register2(Register2),
	.Register3(Register3),
	.REGISTER4TEST(REGISTER4TEST),
	.RegOut1(RegOut1),
	.RegOut2(RegOut2),
	.WriteReg(WriteReg)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 
// Data[ 7 ]
initial
begin
	Data[7] = 1'b0;
end 
// Data[ 6 ]
initial
begin
	Data[6] = 1'b0;
	Data[6] = #30000 1'b1;
	Data[6] = #40000 1'b0;
	Data[6] = #250000 1'b1;
	Data[6] = #260000 1'b0;
end 
// Data[ 5 ]
initial
begin
	Data[5] = 1'b0;
	Data[5] = #30000 1'b1;
	Data[5] = #40000 1'b0;
end 
// Data[ 4 ]
initial
begin
	Data[4] = 1'b0;
	Data[4] = #320000 1'b1;
	Data[4] = #260000 1'b0;
end 
// Data[ 3 ]
initial
begin
	Data[3] = 1'b0;
	Data[3] = #320000 1'b1;
	Data[3] = #260000 1'b0;
end 
// Data[ 2 ]
initial
begin
	Data[2] = 1'b0;
end 
// Data[ 1 ]
initial
begin
	Data[1] = 1'b0;
	Data[1] = #320000 1'b1;
	Data[1] = #260000 1'b0;
end 
// Data[ 0 ]
initial
begin
	Data[0] = 1'b0;
	Data[0] = #30000 1'b1;
	Data[0] = #40000 1'b0;
	Data[0] = #250000 1'b1;
	Data[0] = #260000 1'b0;
end 
// Register1[ 2 ]
initial
begin
	Register1[2] = 1'b1;
end 
// Register1[ 1 ]
initial
begin
	Register1[1] = 1'b0;
end 
// Register1[ 0 ]
initial
begin
	Register1[0] = 1'b0;
end 
// Register2[ 2 ]
initial
begin
	Register2[2] = 1'b1;
end 
// Register2[ 1 ]
initial
begin
	Register2[1] = 1'b1;
end 
// Register2[ 0 ]
initial
begin
	Register2[0] = 1'b1;
end 
// Register3[ 2 ]
initial
begin
	Register3[2] = 1'b1;
	Register3[2] = #300000 1'b0;
	Register3[2] = #160000 1'b1;
	Register3[2] = #320000 1'b0;
end 
// Register3[ 1 ]
initial
begin
	Register3[1] = 1'b0;
	Register3[1] = #460000 1'b1;
	Register3[1] = #320000 1'b0;
end 
// Register3[ 0 ]
initial
begin
	Register3[0] = 1'b0;
	Register3[0] = #460000 1'b1;
	Register3[0] = #320000 1'b0;
end 

// WriteReg
initial
begin
	WriteReg = 1'b1;
	WriteReg = #960000 1'b0;
end 

RegisterFile_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.Data(Data),
	.Register1(Register1),
	.Register2(Register2),
	.Register3(Register3),
	.WriteReg(WriteReg),
	.sampler_tx(sampler)
);

RegisterFile_vlg_check_tst tb_out(
	.REGISTER4TEST(REGISTER4TEST),
	.RegOut1(RegOut1),
	.RegOut2(RegOut2),
	.sampler_rx(sampler)
);
endmodule

