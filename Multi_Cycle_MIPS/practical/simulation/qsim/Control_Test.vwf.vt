// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2024 11:01:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_CPU_MULTI_CYCLE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_CPU_MULTI_CYCLE_vlg_sample_tst(
	CLOCK,
	CONTROL_CLOCK,
	Memory_CLOCK,
	sampler_tx
);
input  CLOCK;
input  CONTROL_CLOCK;
input  Memory_CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or CONTROL_CLOCK or Memory_CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_CPU_MULTI_CYCLE_vlg_check_tst (
	A,
	ADDRESS,
	ALU_OUT,
	ALU_RESULT,
	ALUOp,
	ALUSrcA,
	ALUSrcB,
	B,
	Instruction,
	Mem,
	Memory_Data_Register,
	PC,
	PCWrite,
	Reg1,
	Reg2,
	Register1,
	Register2,
	WriteData,
	WriteData_Register,
	sampler_rx
);
input [7:0] A;
input [7:0] ADDRESS;
input [7:0] ALU_OUT;
input [7:0] ALU_RESULT;
input [3:0] ALUOp;
input  ALUSrcA;
input [1:0] ALUSrcB;
input [7:0] B;
input [15:0] Instruction;
input [15:0] Mem;
input [7:0] Memory_Data_Register;
input [7:0] PC;
input  PCWrite;
input [7:0] Reg1;
input [7:0] Reg2;
input [2:0] Register1;
input [2:0] Register2;
input [7:0] WriteData;
input [7:0] WriteData_Register;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] ADDRESS_expected;
reg [7:0] ALU_OUT_expected;
reg [7:0] ALU_RESULT_expected;
reg [3:0] ALUOp_expected;
reg  ALUSrcA_expected;
reg [1:0] ALUSrcB_expected;
reg [7:0] B_expected;
reg [15:0] Instruction_expected;
reg [15:0] Mem_expected;
reg [7:0] Memory_Data_Register_expected;
reg [7:0] PC_expected;
reg  PCWrite_expected;
reg [7:0] Reg1_expected;
reg [7:0] Reg2_expected;
reg [2:0] Register1_expected;
reg [2:0] Register2_expected;
reg [7:0] WriteData_expected;
reg [7:0] WriteData_Register_expected;

reg [7:0] A_prev;
reg [7:0] ADDRESS_prev;
reg [7:0] ALU_OUT_prev;
reg [7:0] ALU_RESULT_prev;
reg [3:0] ALUOp_prev;
reg  ALUSrcA_prev;
reg [1:0] ALUSrcB_prev;
reg [7:0] B_prev;
reg [15:0] Instruction_prev;
reg [15:0] Mem_prev;
reg [7:0] Memory_Data_Register_prev;
reg [7:0] PC_prev;
reg  PCWrite_prev;
reg [7:0] Reg1_prev;
reg [7:0] Reg2_prev;
reg [2:0] Register1_prev;
reg [2:0] Register2_prev;
reg [7:0] WriteData_prev;
reg [7:0] WriteData_Register_prev;

reg [3:0] ALUOp_expected_prev;
reg  ALUSrcA_expected_prev;
reg [1:0] ALUSrcB_expected_prev;
reg  PCWrite_expected_prev;

reg [3:0] last_ALUOp_exp;
reg  last_ALUSrcA_exp;
reg [1:0] last_ALUSrcB_exp;
reg  last_PCWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	ADDRESS_prev = ADDRESS;
	ALU_OUT_prev = ALU_OUT;
	ALU_RESULT_prev = ALU_RESULT;
	ALUOp_prev = ALUOp;
	ALUSrcA_prev = ALUSrcA;
	ALUSrcB_prev = ALUSrcB;
	B_prev = B;
	Instruction_prev = Instruction;
	Mem_prev = Mem;
	Memory_Data_Register_prev = Memory_Data_Register;
	PC_prev = PC;
	PCWrite_prev = PCWrite;
	Reg1_prev = Reg1;
	Reg2_prev = Reg2;
	Register1_prev = Register1;
	Register2_prev = Register2;
	WriteData_prev = WriteData;
	WriteData_Register_prev = WriteData_Register;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOp_expected_prev = ALUOp_expected;
	ALUSrcA_expected_prev = ALUSrcA_expected;
	ALUSrcB_expected_prev = ALUSrcB_expected;
	PCWrite_expected_prev = PCWrite_expected;
end


// expected ALUOp[ 3 ]
initial
begin
	ALUOp_expected[3] = 1'bX;
end 
// expected ALUOp[ 2 ]
initial
begin
	ALUOp_expected[2] = 1'bX;
end 
// expected ALUOp[ 1 ]
initial
begin
	ALUOp_expected[1] = 1'bX;
end 
// expected ALUOp[ 0 ]
initial
begin
	ALUOp_expected[0] = 1'bX;
end 

// expected ALUSrcA
initial
begin
	ALUSrcA_expected = 1'bX;
end 
// expected ALUSrcB[ 1 ]
initial
begin
	ALUSrcB_expected[1] = 1'bX;
end 
// expected ALUSrcB[ 0 ]
initial
begin
	ALUSrcB_expected[0] = 1'bX;
end 

// expected PCWrite
initial
begin
	PCWrite_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or ADDRESS_expected or ADDRESS or ALU_OUT_expected or ALU_OUT or ALU_RESULT_expected or ALU_RESULT or ALUOp_expected or ALUOp or ALUSrcA_expected or ALUSrcA or ALUSrcB_expected or ALUSrcB or B_expected or B or Instruction_expected or Instruction or Mem_expected or Mem or Memory_Data_Register_expected or Memory_Data_Register or PC_expected or PC or PCWrite_expected or PCWrite or Reg1_expected or Reg1 or Reg2_expected or Reg2 or Register1_expected or Register1 or Register2_expected or Register2 or WriteData_expected or WriteData or WriteData_Register_expected or WriteData_Register)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected ADDRESS = %b | expected ALU_OUT = %b | expected ALU_RESULT = %b | expected ALUOp = %b | expected ALUSrcA = %b | expected ALUSrcB = %b | expected B = %b | expected Instruction = %b | expected Mem = %b | expected Memory_Data_Register = %b | expected PC = %b | expected PCWrite = %b | expected Reg1 = %b | expected Reg2 = %b | expected Register1 = %b | expected Register2 = %b | expected WriteData = %b | expected WriteData_Register = %b | ",A_expected_prev,ADDRESS_expected_prev,ALU_OUT_expected_prev,ALU_RESULT_expected_prev,ALUOp_expected_prev,ALUSrcA_expected_prev,ALUSrcB_expected_prev,B_expected_prev,Instruction_expected_prev,Mem_expected_prev,Memory_Data_Register_expected_prev,PC_expected_prev,PCWrite_expected_prev,Reg1_expected_prev,Reg2_expected_prev,Register1_expected_prev,Register2_expected_prev,WriteData_expected_prev,WriteData_Register_expected_prev);
	$display("| real A = %b | real ADDRESS = %b | real ALU_OUT = %b | real ALU_RESULT = %b | real ALUOp = %b | real ALUSrcA = %b | real ALUSrcB = %b | real B = %b | real Instruction = %b | real Mem = %b | real Memory_Data_Register = %b | real PC = %b | real PCWrite = %b | real Reg1 = %b | real Reg2 = %b | real Register1 = %b | real Register2 = %b | real WriteData = %b | real WriteData_Register = %b | ",A_prev,ADDRESS_prev,ALU_OUT_prev,ALU_RESULT_prev,ALUOp_prev,ALUSrcA_prev,ALUSrcB_prev,B_prev,Instruction_prev,Mem_prev,Memory_Data_Register_prev,PC_prev,PCWrite_prev,Reg1_prev,Reg2_prev,Register1_prev,Register2_prev,WriteData_prev,WriteData_Register_prev);
`endif
	if (
		( ALUOp_expected_prev[0] !== 1'bx ) && ( ALUOp_prev[0] !== ALUOp_expected_prev[0] )
		&& ((ALUOp_expected_prev[0] !== last_ALUOp_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUOp_exp[0] = ALUOp_expected_prev[0];
	end
	if (
		( ALUOp_expected_prev[1] !== 1'bx ) && ( ALUOp_prev[1] !== ALUOp_expected_prev[1] )
		&& ((ALUOp_expected_prev[1] !== last_ALUOp_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUOp_exp[1] = ALUOp_expected_prev[1];
	end
	if (
		( ALUOp_expected_prev[2] !== 1'bx ) && ( ALUOp_prev[2] !== ALUOp_expected_prev[2] )
		&& ((ALUOp_expected_prev[2] !== last_ALUOp_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUOp_exp[2] = ALUOp_expected_prev[2];
	end
	if (
		( ALUOp_expected_prev[3] !== 1'bx ) && ( ALUOp_prev[3] !== ALUOp_expected_prev[3] )
		&& ((ALUOp_expected_prev[3] !== last_ALUOp_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUOp_exp[3] = ALUOp_expected_prev[3];
	end
	if (
		( ALUSrcA_expected_prev !== 1'bx ) && ( ALUSrcA_prev !== ALUSrcA_expected_prev )
		&& ((ALUSrcA_expected_prev !== last_ALUSrcA_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcA_expected_prev);
		$display ("     Real value = %b", ALUSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUSrcA_exp = ALUSrcA_expected_prev;
	end
	if (
		( ALUSrcB_expected_prev[0] !== 1'bx ) && ( ALUSrcB_prev[0] !== ALUSrcB_expected_prev[0] )
		&& ((ALUSrcB_expected_prev[0] !== last_ALUSrcB_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ALUSrcB_exp[0] = ALUSrcB_expected_prev[0];
	end
	if (
		( ALUSrcB_expected_prev[1] !== 1'bx ) && ( ALUSrcB_prev[1] !== ALUSrcB_expected_prev[1] )
		&& ((ALUSrcB_expected_prev[1] !== last_ALUSrcB_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ALUSrcB_exp[1] = ALUSrcB_expected_prev[1];
	end
	if (
		( PCWrite_expected_prev !== 1'bx ) && ( PCWrite_prev !== PCWrite_expected_prev )
		&& ((PCWrite_expected_prev !== last_PCWrite_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCWrite_expected_prev);
		$display ("     Real value = %b", PCWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PCWrite_exp = PCWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_CPU_MULTI_CYCLE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg CONTROL_CLOCK;
reg Memory_CLOCK;
// wires                                               
wire [7:0] A;
wire [7:0] ADDRESS;
wire [7:0] ALU_OUT;
wire [7:0] ALU_RESULT;
wire [3:0] ALUOp;
wire ALUSrcA;
wire [1:0] ALUSrcB;
wire [7:0] B;
wire [15:0] Instruction;
wire [15:0] Mem;
wire [7:0] Memory_Data_Register;
wire [7:0] PC;
wire PCWrite;
wire [7:0] Reg1;
wire [7:0] Reg2;
wire [2:0] Register1;
wire [2:0] Register2;
wire [7:0] WriteData;
wire [7:0] WriteData_Register;

wire sampler;                             

// assign statements (if any)                          
MIPS_CPU_MULTI_CYCLE i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ADDRESS(ADDRESS),
	.ALU_OUT(ALU_OUT),
	.ALU_RESULT(ALU_RESULT),
	.ALUOp(ALUOp),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.B(B),
	.CLOCK(CLOCK),
	.CONTROL_CLOCK(CONTROL_CLOCK),
	.Instruction(Instruction),
	.Mem(Mem),
	.Memory_CLOCK(Memory_CLOCK),
	.Memory_Data_Register(Memory_Data_Register),
	.PC(PC),
	.PCWrite(PCWrite),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.Register1(Register1),
	.Register2(Register2),
	.WriteData(WriteData),
	.WriteData_Register(WriteData_Register)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

MIPS_CPU_MULTI_CYCLE_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.CONTROL_CLOCK(CONTROL_CLOCK),
	.Memory_CLOCK(Memory_CLOCK),
	.sampler_tx(sampler)
);

MIPS_CPU_MULTI_CYCLE_vlg_check_tst tb_out(
	.A(A),
	.ADDRESS(ADDRESS),
	.ALU_OUT(ALU_OUT),
	.ALU_RESULT(ALU_RESULT),
	.ALUOp(ALUOp),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.B(B),
	.Instruction(Instruction),
	.Mem(Mem),
	.Memory_Data_Register(Memory_Data_Register),
	.PC(PC),
	.PCWrite(PCWrite),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.Register1(Register1),
	.Register2(Register2),
	.WriteData(WriteData),
	.WriteData_Register(WriteData_Register),
	.sampler_rx(sampler)
);
endmodule

