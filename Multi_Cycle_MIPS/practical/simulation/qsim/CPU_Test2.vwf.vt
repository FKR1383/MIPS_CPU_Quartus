// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2024 17:41:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_CPU_vlg_sample_tst(
	ALU_ENABLE,
	CLOCK,
	sampler_tx
);
input  ALU_ENABLE;
input  CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(ALU_ENABLE or CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_CPU_vlg_check_tst (
	Address,
	ALU_result_OUT,
	Branch,
	Instruction_OUT,
	JAL,
	Jump,
	Operand2_OUT,
	PC_OUT,
	Read_Data_OUT,
	Reg1_OUT,
	Reg2_OUT,
	Write_Data_OUT,
	Write_Register_OUT,
	WriteData,
	ZERO,
	sampler_rx
);
input [7:0] Address;
input [7:0] ALU_result_OUT;
input  Branch;
input [15:0] Instruction_OUT;
input  JAL;
input  Jump;
input [7:0] Operand2_OUT;
input [7:0] PC_OUT;
input [15:0] Read_Data_OUT;
input [7:0] Reg1_OUT;
input [7:0] Reg2_OUT;
input [7:0] Write_Data_OUT;
input [2:0] Write_Register_OUT;
input [15:0] WriteData;
input  ZERO;
input sampler_rx;

reg [7:0] Address_expected;
reg [7:0] ALU_result_OUT_expected;
reg  Branch_expected;
reg [15:0] Instruction_OUT_expected;
reg  JAL_expected;
reg  Jump_expected;
reg [7:0] Operand2_OUT_expected;
reg [7:0] PC_OUT_expected;
reg [15:0] Read_Data_OUT_expected;
reg [7:0] Reg1_OUT_expected;
reg [7:0] Reg2_OUT_expected;
reg [7:0] Write_Data_OUT_expected;
reg [2:0] Write_Register_OUT_expected;
reg [15:0] WriteData_expected;
reg  ZERO_expected;

reg [7:0] Address_prev;
reg [7:0] ALU_result_OUT_prev;
reg  Branch_prev;
reg [15:0] Instruction_OUT_prev;
reg  JAL_prev;
reg  Jump_prev;
reg [7:0] Operand2_OUT_prev;
reg [7:0] PC_OUT_prev;
reg [15:0] Read_Data_OUT_prev;
reg [7:0] Reg1_OUT_prev;
reg [7:0] Reg2_OUT_prev;
reg [7:0] Write_Data_OUT_prev;
reg [2:0] Write_Register_OUT_prev;
reg [15:0] WriteData_prev;
reg  ZERO_prev;

reg [7:0] Address_expected_prev;
reg [7:0] ALU_result_OUT_expected_prev;
reg  Branch_expected_prev;
reg [15:0] Instruction_OUT_expected_prev;
reg  JAL_expected_prev;
reg  Jump_expected_prev;
reg [7:0] Operand2_OUT_expected_prev;
reg [7:0] PC_OUT_expected_prev;
reg [15:0] Read_Data_OUT_expected_prev;
reg [7:0] Reg1_OUT_expected_prev;
reg [7:0] Reg2_OUT_expected_prev;
reg [7:0] Write_Data_OUT_expected_prev;
reg [2:0] Write_Register_OUT_expected_prev;
reg [15:0] WriteData_expected_prev;
reg  ZERO_expected_prev;

reg [7:0] last_Address_exp;
reg [7:0] last_ALU_result_OUT_exp;
reg  last_Branch_exp;
reg [15:0] last_Instruction_OUT_exp;
reg  last_JAL_exp;
reg  last_Jump_exp;
reg [7:0] last_Operand2_OUT_exp;
reg [7:0] last_PC_OUT_exp;
reg [15:0] last_Read_Data_OUT_exp;
reg [7:0] last_Reg1_OUT_exp;
reg [7:0] last_Reg2_OUT_exp;
reg [7:0] last_Write_Data_OUT_exp;
reg [2:0] last_Write_Register_OUT_exp;
reg [15:0] last_WriteData_exp;
reg  last_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	Address_prev = Address;
	ALU_result_OUT_prev = ALU_result_OUT;
	Branch_prev = Branch;
	Instruction_OUT_prev = Instruction_OUT;
	JAL_prev = JAL;
	Jump_prev = Jump;
	Operand2_OUT_prev = Operand2_OUT;
	PC_OUT_prev = PC_OUT;
	Read_Data_OUT_prev = Read_Data_OUT;
	Reg1_OUT_prev = Reg1_OUT;
	Reg2_OUT_prev = Reg2_OUT;
	Write_Data_OUT_prev = Write_Data_OUT;
	Write_Register_OUT_prev = Write_Register_OUT;
	WriteData_prev = WriteData;
	ZERO_prev = ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	Address_expected_prev = Address_expected;
	ALU_result_OUT_expected_prev = ALU_result_OUT_expected;
	Branch_expected_prev = Branch_expected;
	Instruction_OUT_expected_prev = Instruction_OUT_expected;
	JAL_expected_prev = JAL_expected;
	Jump_expected_prev = Jump_expected;
	Operand2_OUT_expected_prev = Operand2_OUT_expected;
	PC_OUT_expected_prev = PC_OUT_expected;
	Read_Data_OUT_expected_prev = Read_Data_OUT_expected;
	Reg1_OUT_expected_prev = Reg1_OUT_expected;
	Reg2_OUT_expected_prev = Reg2_OUT_expected;
	Write_Data_OUT_expected_prev = Write_Data_OUT_expected;
	Write_Register_OUT_expected_prev = Write_Register_OUT_expected;
	WriteData_expected_prev = WriteData_expected;
	ZERO_expected_prev = ZERO_expected;
end


// expected Address[ 7 ]
initial
begin
	Address_expected[7] = 1'bX;
	Address_expected[7] = #999000 1'b0;
end 
// expected Address[ 6 ]
initial
begin
	Address_expected[6] = 1'bX;
	Address_expected[6] = #999000 1'b0;
end 
// expected Address[ 5 ]
initial
begin
	Address_expected[5] = 1'bX;
	Address_expected[5] = #999000 1'b0;
end 
// expected Address[ 4 ]
initial
begin
	Address_expected[4] = 1'bX;
	Address_expected[4] = #999000 1'b0;
end 
// expected Address[ 3 ]
initial
begin
	Address_expected[3] = 1'bX;
	Address_expected[3] = #999000 1'b0;
end 
// expected Address[ 2 ]
initial
begin
	Address_expected[2] = 1'bX;
	Address_expected[2] = #999000 1'b0;
end 
// expected Address[ 1 ]
initial
begin
	Address_expected[1] = 1'bX;
	Address_expected[1] = #999000 1'b0;
end 
// expected Address[ 0 ]
initial
begin
	Address_expected[0] = 1'bX;
	Address_expected[0] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 7 ]
initial
begin
	ALU_result_OUT_expected[7] = 1'bX;
	ALU_result_OUT_expected[7] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 6 ]
initial
begin
	ALU_result_OUT_expected[6] = 1'bX;
	ALU_result_OUT_expected[6] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 5 ]
initial
begin
	ALU_result_OUT_expected[5] = 1'bX;
	ALU_result_OUT_expected[5] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 4 ]
initial
begin
	ALU_result_OUT_expected[4] = 1'bX;
	ALU_result_OUT_expected[4] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 3 ]
initial
begin
	ALU_result_OUT_expected[3] = 1'bX;
	ALU_result_OUT_expected[3] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 2 ]
initial
begin
	ALU_result_OUT_expected[2] = 1'bX;
	ALU_result_OUT_expected[2] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 1 ]
initial
begin
	ALU_result_OUT_expected[1] = 1'bX;
	ALU_result_OUT_expected[1] = #999000 1'b0;
end 
// expected ALU_result_OUT[ 0 ]
initial
begin
	ALU_result_OUT_expected[0] = 1'bX;
	ALU_result_OUT_expected[0] = #999000 1'b0;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
	Branch_expected = #999000 1'b0;
end 
// expected Instruction_OUT[ 15 ]
initial
begin
	Instruction_OUT_expected[15] = 1'bX;
	Instruction_OUT_expected[15] = #999000 1'b0;
end 
// expected Instruction_OUT[ 14 ]
initial
begin
	Instruction_OUT_expected[14] = 1'bX;
	Instruction_OUT_expected[14] = #999000 1'b0;
end 
// expected Instruction_OUT[ 13 ]
initial
begin
	Instruction_OUT_expected[13] = 1'bX;
	Instruction_OUT_expected[13] = #999000 1'b0;
end 
// expected Instruction_OUT[ 12 ]
initial
begin
	Instruction_OUT_expected[12] = 1'bX;
	Instruction_OUT_expected[12] = #999000 1'b0;
end 
// expected Instruction_OUT[ 11 ]
initial
begin
	Instruction_OUT_expected[11] = 1'bX;
	Instruction_OUT_expected[11] = #999000 1'b0;
end 
// expected Instruction_OUT[ 10 ]
initial
begin
	Instruction_OUT_expected[10] = 1'bX;
	Instruction_OUT_expected[10] = #999000 1'b0;
end 
// expected Instruction_OUT[ 9 ]
initial
begin
	Instruction_OUT_expected[9] = 1'bX;
	Instruction_OUT_expected[9] = #999000 1'b0;
end 
// expected Instruction_OUT[ 8 ]
initial
begin
	Instruction_OUT_expected[8] = 1'bX;
	Instruction_OUT_expected[8] = #999000 1'b0;
end 
// expected Instruction_OUT[ 7 ]
initial
begin
	Instruction_OUT_expected[7] = 1'bX;
	Instruction_OUT_expected[7] = #999000 1'b0;
end 
// expected Instruction_OUT[ 6 ]
initial
begin
	Instruction_OUT_expected[6] = 1'bX;
	Instruction_OUT_expected[6] = #999000 1'b0;
end 
// expected Instruction_OUT[ 5 ]
initial
begin
	Instruction_OUT_expected[5] = 1'bX;
	Instruction_OUT_expected[5] = #999000 1'b0;
end 
// expected Instruction_OUT[ 4 ]
initial
begin
	Instruction_OUT_expected[4] = 1'bX;
	Instruction_OUT_expected[4] = #999000 1'b0;
end 
// expected Instruction_OUT[ 3 ]
initial
begin
	Instruction_OUT_expected[3] = 1'bX;
	Instruction_OUT_expected[3] = #999000 1'b0;
end 
// expected Instruction_OUT[ 2 ]
initial
begin
	Instruction_OUT_expected[2] = 1'bX;
	Instruction_OUT_expected[2] = #999000 1'b0;
end 
// expected Instruction_OUT[ 1 ]
initial
begin
	Instruction_OUT_expected[1] = 1'bX;
	Instruction_OUT_expected[1] = #999000 1'b0;
end 
// expected Instruction_OUT[ 0 ]
initial
begin
	Instruction_OUT_expected[0] = 1'bX;
	Instruction_OUT_expected[0] = #999000 1'b0;
end 

// expected JAL
initial
begin
	JAL_expected = 1'bX;
	JAL_expected = #999000 1'b0;
end 

// expected Jump
initial
begin
	Jump_expected = 1'bX;
	Jump_expected = #999000 1'b0;
end 
// expected Operand2_OUT[ 7 ]
initial
begin
	Operand2_OUT_expected[7] = 1'bX;
	Operand2_OUT_expected[7] = #999000 1'b0;
end 
// expected Operand2_OUT[ 6 ]
initial
begin
	Operand2_OUT_expected[6] = 1'bX;
	Operand2_OUT_expected[6] = #999000 1'b0;
end 
// expected Operand2_OUT[ 5 ]
initial
begin
	Operand2_OUT_expected[5] = 1'bX;
	Operand2_OUT_expected[5] = #999000 1'b0;
end 
// expected Operand2_OUT[ 4 ]
initial
begin
	Operand2_OUT_expected[4] = 1'bX;
	Operand2_OUT_expected[4] = #999000 1'b0;
end 
// expected Operand2_OUT[ 3 ]
initial
begin
	Operand2_OUT_expected[3] = 1'bX;
	Operand2_OUT_expected[3] = #999000 1'b0;
end 
// expected Operand2_OUT[ 2 ]
initial
begin
	Operand2_OUT_expected[2] = 1'bX;
	Operand2_OUT_expected[2] = #999000 1'b0;
end 
// expected Operand2_OUT[ 1 ]
initial
begin
	Operand2_OUT_expected[1] = 1'bX;
	Operand2_OUT_expected[1] = #999000 1'b0;
end 
// expected Operand2_OUT[ 0 ]
initial
begin
	Operand2_OUT_expected[0] = 1'bX;
	Operand2_OUT_expected[0] = #999000 1'b0;
end 
// expected PC_OUT[ 7 ]
initial
begin
	PC_OUT_expected[7] = 1'bX;
	PC_OUT_expected[7] = #999000 1'b0;
end 
// expected PC_OUT[ 6 ]
initial
begin
	PC_OUT_expected[6] = 1'bX;
	PC_OUT_expected[6] = #999000 1'b0;
end 
// expected PC_OUT[ 5 ]
initial
begin
	PC_OUT_expected[5] = 1'bX;
	PC_OUT_expected[5] = #999000 1'b0;
end 
// expected PC_OUT[ 4 ]
initial
begin
	PC_OUT_expected[4] = 1'bX;
	PC_OUT_expected[4] = #999000 1'b0;
end 
// expected PC_OUT[ 3 ]
initial
begin
	PC_OUT_expected[3] = 1'bX;
	PC_OUT_expected[3] = #999000 1'b0;
end 
// expected PC_OUT[ 2 ]
initial
begin
	PC_OUT_expected[2] = 1'bX;
	PC_OUT_expected[2] = #999000 1'b0;
end 
// expected PC_OUT[ 1 ]
initial
begin
	PC_OUT_expected[1] = 1'bX;
	PC_OUT_expected[1] = #999000 1'b0;
end 
// expected PC_OUT[ 0 ]
initial
begin
	PC_OUT_expected[0] = 1'bX;
	PC_OUT_expected[0] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 15 ]
initial
begin
	Read_Data_OUT_expected[15] = 1'bX;
	Read_Data_OUT_expected[15] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 14 ]
initial
begin
	Read_Data_OUT_expected[14] = 1'bX;
	Read_Data_OUT_expected[14] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 13 ]
initial
begin
	Read_Data_OUT_expected[13] = 1'bX;
	Read_Data_OUT_expected[13] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 12 ]
initial
begin
	Read_Data_OUT_expected[12] = 1'bX;
	Read_Data_OUT_expected[12] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 11 ]
initial
begin
	Read_Data_OUT_expected[11] = 1'bX;
	Read_Data_OUT_expected[11] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 10 ]
initial
begin
	Read_Data_OUT_expected[10] = 1'bX;
	Read_Data_OUT_expected[10] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 9 ]
initial
begin
	Read_Data_OUT_expected[9] = 1'bX;
	Read_Data_OUT_expected[9] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 8 ]
initial
begin
	Read_Data_OUT_expected[8] = 1'bX;
	Read_Data_OUT_expected[8] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 7 ]
initial
begin
	Read_Data_OUT_expected[7] = 1'bX;
	Read_Data_OUT_expected[7] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 6 ]
initial
begin
	Read_Data_OUT_expected[6] = 1'bX;
	Read_Data_OUT_expected[6] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 5 ]
initial
begin
	Read_Data_OUT_expected[5] = 1'bX;
	Read_Data_OUT_expected[5] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 4 ]
initial
begin
	Read_Data_OUT_expected[4] = 1'bX;
	Read_Data_OUT_expected[4] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 3 ]
initial
begin
	Read_Data_OUT_expected[3] = 1'bX;
	Read_Data_OUT_expected[3] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 2 ]
initial
begin
	Read_Data_OUT_expected[2] = 1'bX;
	Read_Data_OUT_expected[2] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 1 ]
initial
begin
	Read_Data_OUT_expected[1] = 1'bX;
	Read_Data_OUT_expected[1] = #999000 1'b0;
end 
// expected Read_Data_OUT[ 0 ]
initial
begin
	Read_Data_OUT_expected[0] = 1'bX;
	Read_Data_OUT_expected[0] = #999000 1'b0;
end 
// expected Reg1_OUT[ 7 ]
initial
begin
	Reg1_OUT_expected[7] = 1'bX;
	Reg1_OUT_expected[7] = #999000 1'b0;
end 
// expected Reg1_OUT[ 6 ]
initial
begin
	Reg1_OUT_expected[6] = 1'bX;
	Reg1_OUT_expected[6] = #999000 1'b0;
end 
// expected Reg1_OUT[ 5 ]
initial
begin
	Reg1_OUT_expected[5] = 1'bX;
	Reg1_OUT_expected[5] = #999000 1'b0;
end 
// expected Reg1_OUT[ 4 ]
initial
begin
	Reg1_OUT_expected[4] = 1'bX;
	Reg1_OUT_expected[4] = #999000 1'b0;
end 
// expected Reg1_OUT[ 3 ]
initial
begin
	Reg1_OUT_expected[3] = 1'bX;
	Reg1_OUT_expected[3] = #999000 1'b0;
end 
// expected Reg1_OUT[ 2 ]
initial
begin
	Reg1_OUT_expected[2] = 1'bX;
	Reg1_OUT_expected[2] = #999000 1'b0;
end 
// expected Reg1_OUT[ 1 ]
initial
begin
	Reg1_OUT_expected[1] = 1'bX;
	Reg1_OUT_expected[1] = #999000 1'b0;
end 
// expected Reg1_OUT[ 0 ]
initial
begin
	Reg1_OUT_expected[0] = 1'bX;
	Reg1_OUT_expected[0] = #999000 1'b0;
end 
// expected Reg2_OUT[ 7 ]
initial
begin
	Reg2_OUT_expected[7] = 1'bX;
	Reg2_OUT_expected[7] = #999000 1'b0;
end 
// expected Reg2_OUT[ 6 ]
initial
begin
	Reg2_OUT_expected[6] = 1'bX;
	Reg2_OUT_expected[6] = #999000 1'b0;
end 
// expected Reg2_OUT[ 5 ]
initial
begin
	Reg2_OUT_expected[5] = 1'bX;
	Reg2_OUT_expected[5] = #999000 1'b0;
end 
// expected Reg2_OUT[ 4 ]
initial
begin
	Reg2_OUT_expected[4] = 1'bX;
	Reg2_OUT_expected[4] = #999000 1'b0;
end 
// expected Reg2_OUT[ 3 ]
initial
begin
	Reg2_OUT_expected[3] = 1'bX;
	Reg2_OUT_expected[3] = #999000 1'b0;
end 
// expected Reg2_OUT[ 2 ]
initial
begin
	Reg2_OUT_expected[2] = 1'bX;
	Reg2_OUT_expected[2] = #999000 1'b0;
end 
// expected Reg2_OUT[ 1 ]
initial
begin
	Reg2_OUT_expected[1] = 1'bX;
	Reg2_OUT_expected[1] = #999000 1'b0;
end 
// expected Reg2_OUT[ 0 ]
initial
begin
	Reg2_OUT_expected[0] = 1'bX;
	Reg2_OUT_expected[0] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 7 ]
initial
begin
	Write_Data_OUT_expected[7] = 1'bX;
	Write_Data_OUT_expected[7] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 6 ]
initial
begin
	Write_Data_OUT_expected[6] = 1'bX;
	Write_Data_OUT_expected[6] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 5 ]
initial
begin
	Write_Data_OUT_expected[5] = 1'bX;
	Write_Data_OUT_expected[5] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 4 ]
initial
begin
	Write_Data_OUT_expected[4] = 1'bX;
	Write_Data_OUT_expected[4] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 3 ]
initial
begin
	Write_Data_OUT_expected[3] = 1'bX;
	Write_Data_OUT_expected[3] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 2 ]
initial
begin
	Write_Data_OUT_expected[2] = 1'bX;
	Write_Data_OUT_expected[2] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 1 ]
initial
begin
	Write_Data_OUT_expected[1] = 1'bX;
	Write_Data_OUT_expected[1] = #999000 1'b0;
end 
// expected Write_Data_OUT[ 0 ]
initial
begin
	Write_Data_OUT_expected[0] = 1'bX;
	Write_Data_OUT_expected[0] = #999000 1'b0;
end 
// expected Write_Register_OUT[ 2 ]
initial
begin
	Write_Register_OUT_expected[2] = 1'bX;
	Write_Register_OUT_expected[2] = #999000 1'b0;
end 
// expected Write_Register_OUT[ 1 ]
initial
begin
	Write_Register_OUT_expected[1] = 1'bX;
	Write_Register_OUT_expected[1] = #999000 1'b0;
end 
// expected Write_Register_OUT[ 0 ]
initial
begin
	Write_Register_OUT_expected[0] = 1'bX;
	Write_Register_OUT_expected[0] = #999000 1'b0;
end 
// expected WriteData[ 15 ]
initial
begin
	WriteData_expected[15] = 1'bX;
	WriteData_expected[15] = #999000 1'b0;
end 
// expected WriteData[ 14 ]
initial
begin
	WriteData_expected[14] = 1'bX;
	WriteData_expected[14] = #999000 1'b0;
end 
// expected WriteData[ 13 ]
initial
begin
	WriteData_expected[13] = 1'bX;
	WriteData_expected[13] = #999000 1'b0;
end 
// expected WriteData[ 12 ]
initial
begin
	WriteData_expected[12] = 1'bX;
	WriteData_expected[12] = #999000 1'b0;
end 
// expected WriteData[ 11 ]
initial
begin
	WriteData_expected[11] = 1'bX;
	WriteData_expected[11] = #999000 1'b0;
end 
// expected WriteData[ 10 ]
initial
begin
	WriteData_expected[10] = 1'bX;
	WriteData_expected[10] = #999000 1'b0;
end 
// expected WriteData[ 9 ]
initial
begin
	WriteData_expected[9] = 1'bX;
	WriteData_expected[9] = #999000 1'b0;
end 
// expected WriteData[ 8 ]
initial
begin
	WriteData_expected[8] = 1'bX;
	WriteData_expected[8] = #999000 1'b0;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
	WriteData_expected[7] = #999000 1'b0;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
	WriteData_expected[6] = #999000 1'b0;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
	WriteData_expected[5] = #999000 1'b0;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
	WriteData_expected[4] = #999000 1'b0;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
	WriteData_expected[3] = #999000 1'b0;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
	WriteData_expected[2] = #999000 1'b0;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
	WriteData_expected[1] = #999000 1'b0;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
	WriteData_expected[0] = #999000 1'b0;
end 

// expected ZERO
initial
begin
	ZERO_expected = 1'bX;
	ZERO_expected = #999000 1'b0;
end 
// generate trigger
always @(Address_expected or Address or ALU_result_OUT_expected or ALU_result_OUT or Branch_expected or Branch or Instruction_OUT_expected or Instruction_OUT or JAL_expected or JAL or Jump_expected or Jump or Operand2_OUT_expected or Operand2_OUT or PC_OUT_expected or PC_OUT or Read_Data_OUT_expected or Read_Data_OUT or Reg1_OUT_expected or Reg1_OUT or Reg2_OUT_expected or Reg2_OUT or Write_Data_OUT_expected or Write_Data_OUT or Write_Register_OUT_expected or Write_Register_OUT or WriteData_expected or WriteData or ZERO_expected or ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Address = %b | expected ALU_result_OUT = %b | expected Branch = %b | expected Instruction_OUT = %b | expected JAL = %b | expected Jump = %b | expected Operand2_OUT = %b | expected PC_OUT = %b | expected Read_Data_OUT = %b | expected Reg1_OUT = %b | expected Reg2_OUT = %b | expected Write_Data_OUT = %b | expected Write_Register_OUT = %b | expected WriteData = %b | expected ZERO = %b | ",Address_expected_prev,ALU_result_OUT_expected_prev,Branch_expected_prev,Instruction_OUT_expected_prev,JAL_expected_prev,Jump_expected_prev,Operand2_OUT_expected_prev,PC_OUT_expected_prev,Read_Data_OUT_expected_prev,Reg1_OUT_expected_prev,Reg2_OUT_expected_prev,Write_Data_OUT_expected_prev,Write_Register_OUT_expected_prev,WriteData_expected_prev,ZERO_expected_prev);
	$display("| real Address = %b | real ALU_result_OUT = %b | real Branch = %b | real Instruction_OUT = %b | real JAL = %b | real Jump = %b | real Operand2_OUT = %b | real PC_OUT = %b | real Read_Data_OUT = %b | real Reg1_OUT = %b | real Reg2_OUT = %b | real Write_Data_OUT = %b | real Write_Register_OUT = %b | real WriteData = %b | real ZERO = %b | ",Address_prev,ALU_result_OUT_prev,Branch_prev,Instruction_OUT_prev,JAL_prev,Jump_prev,Operand2_OUT_prev,PC_OUT_prev,Read_Data_OUT_prev,Reg1_OUT_prev,Reg2_OUT_prev,Write_Data_OUT_prev,Write_Register_OUT_prev,WriteData_prev,ZERO_prev);
`endif
	if (
		( Address_expected_prev[0] !== 1'bx ) && ( Address_prev[0] !== Address_expected_prev[0] )
		&& ((Address_expected_prev[0] !== last_Address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[0] = Address_expected_prev[0];
	end
	if (
		( Address_expected_prev[1] !== 1'bx ) && ( Address_prev[1] !== Address_expected_prev[1] )
		&& ((Address_expected_prev[1] !== last_Address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[1] = Address_expected_prev[1];
	end
	if (
		( Address_expected_prev[2] !== 1'bx ) && ( Address_prev[2] !== Address_expected_prev[2] )
		&& ((Address_expected_prev[2] !== last_Address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[2] = Address_expected_prev[2];
	end
	if (
		( Address_expected_prev[3] !== 1'bx ) && ( Address_prev[3] !== Address_expected_prev[3] )
		&& ((Address_expected_prev[3] !== last_Address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[3] = Address_expected_prev[3];
	end
	if (
		( Address_expected_prev[4] !== 1'bx ) && ( Address_prev[4] !== Address_expected_prev[4] )
		&& ((Address_expected_prev[4] !== last_Address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[4] = Address_expected_prev[4];
	end
	if (
		( Address_expected_prev[5] !== 1'bx ) && ( Address_prev[5] !== Address_expected_prev[5] )
		&& ((Address_expected_prev[5] !== last_Address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[5] = Address_expected_prev[5];
	end
	if (
		( Address_expected_prev[6] !== 1'bx ) && ( Address_prev[6] !== Address_expected_prev[6] )
		&& ((Address_expected_prev[6] !== last_Address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[6] = Address_expected_prev[6];
	end
	if (
		( Address_expected_prev[7] !== 1'bx ) && ( Address_prev[7] !== Address_expected_prev[7] )
		&& ((Address_expected_prev[7] !== last_Address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[7] = Address_expected_prev[7];
	end
	if (
		( ALU_result_OUT_expected_prev[0] !== 1'bx ) && ( ALU_result_OUT_prev[0] !== ALU_result_OUT_expected_prev[0] )
		&& ((ALU_result_OUT_expected_prev[0] !== last_ALU_result_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[0] = ALU_result_OUT_expected_prev[0];
	end
	if (
		( ALU_result_OUT_expected_prev[1] !== 1'bx ) && ( ALU_result_OUT_prev[1] !== ALU_result_OUT_expected_prev[1] )
		&& ((ALU_result_OUT_expected_prev[1] !== last_ALU_result_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[1] = ALU_result_OUT_expected_prev[1];
	end
	if (
		( ALU_result_OUT_expected_prev[2] !== 1'bx ) && ( ALU_result_OUT_prev[2] !== ALU_result_OUT_expected_prev[2] )
		&& ((ALU_result_OUT_expected_prev[2] !== last_ALU_result_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[2] = ALU_result_OUT_expected_prev[2];
	end
	if (
		( ALU_result_OUT_expected_prev[3] !== 1'bx ) && ( ALU_result_OUT_prev[3] !== ALU_result_OUT_expected_prev[3] )
		&& ((ALU_result_OUT_expected_prev[3] !== last_ALU_result_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[3] = ALU_result_OUT_expected_prev[3];
	end
	if (
		( ALU_result_OUT_expected_prev[4] !== 1'bx ) && ( ALU_result_OUT_prev[4] !== ALU_result_OUT_expected_prev[4] )
		&& ((ALU_result_OUT_expected_prev[4] !== last_ALU_result_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[4] = ALU_result_OUT_expected_prev[4];
	end
	if (
		( ALU_result_OUT_expected_prev[5] !== 1'bx ) && ( ALU_result_OUT_prev[5] !== ALU_result_OUT_expected_prev[5] )
		&& ((ALU_result_OUT_expected_prev[5] !== last_ALU_result_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[5] = ALU_result_OUT_expected_prev[5];
	end
	if (
		( ALU_result_OUT_expected_prev[6] !== 1'bx ) && ( ALU_result_OUT_prev[6] !== ALU_result_OUT_expected_prev[6] )
		&& ((ALU_result_OUT_expected_prev[6] !== last_ALU_result_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[6] = ALU_result_OUT_expected_prev[6];
	end
	if (
		( ALU_result_OUT_expected_prev[7] !== 1'bx ) && ( ALU_result_OUT_prev[7] !== ALU_result_OUT_expected_prev[7] )
		&& ((ALU_result_OUT_expected_prev[7] !== last_ALU_result_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_OUT_expected_prev);
		$display ("     Real value = %b", ALU_result_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_result_OUT_exp[7] = ALU_result_OUT_expected_prev[7];
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( Instruction_OUT_expected_prev[0] !== 1'bx ) && ( Instruction_OUT_prev[0] !== Instruction_OUT_expected_prev[0] )
		&& ((Instruction_OUT_expected_prev[0] !== last_Instruction_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[0] = Instruction_OUT_expected_prev[0];
	end
	if (
		( Instruction_OUT_expected_prev[1] !== 1'bx ) && ( Instruction_OUT_prev[1] !== Instruction_OUT_expected_prev[1] )
		&& ((Instruction_OUT_expected_prev[1] !== last_Instruction_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[1] = Instruction_OUT_expected_prev[1];
	end
	if (
		( Instruction_OUT_expected_prev[2] !== 1'bx ) && ( Instruction_OUT_prev[2] !== Instruction_OUT_expected_prev[2] )
		&& ((Instruction_OUT_expected_prev[2] !== last_Instruction_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[2] = Instruction_OUT_expected_prev[2];
	end
	if (
		( Instruction_OUT_expected_prev[3] !== 1'bx ) && ( Instruction_OUT_prev[3] !== Instruction_OUT_expected_prev[3] )
		&& ((Instruction_OUT_expected_prev[3] !== last_Instruction_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[3] = Instruction_OUT_expected_prev[3];
	end
	if (
		( Instruction_OUT_expected_prev[4] !== 1'bx ) && ( Instruction_OUT_prev[4] !== Instruction_OUT_expected_prev[4] )
		&& ((Instruction_OUT_expected_prev[4] !== last_Instruction_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[4] = Instruction_OUT_expected_prev[4];
	end
	if (
		( Instruction_OUT_expected_prev[5] !== 1'bx ) && ( Instruction_OUT_prev[5] !== Instruction_OUT_expected_prev[5] )
		&& ((Instruction_OUT_expected_prev[5] !== last_Instruction_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[5] = Instruction_OUT_expected_prev[5];
	end
	if (
		( Instruction_OUT_expected_prev[6] !== 1'bx ) && ( Instruction_OUT_prev[6] !== Instruction_OUT_expected_prev[6] )
		&& ((Instruction_OUT_expected_prev[6] !== last_Instruction_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[6] = Instruction_OUT_expected_prev[6];
	end
	if (
		( Instruction_OUT_expected_prev[7] !== 1'bx ) && ( Instruction_OUT_prev[7] !== Instruction_OUT_expected_prev[7] )
		&& ((Instruction_OUT_expected_prev[7] !== last_Instruction_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[7] = Instruction_OUT_expected_prev[7];
	end
	if (
		( Instruction_OUT_expected_prev[8] !== 1'bx ) && ( Instruction_OUT_prev[8] !== Instruction_OUT_expected_prev[8] )
		&& ((Instruction_OUT_expected_prev[8] !== last_Instruction_OUT_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[8] = Instruction_OUT_expected_prev[8];
	end
	if (
		( Instruction_OUT_expected_prev[9] !== 1'bx ) && ( Instruction_OUT_prev[9] !== Instruction_OUT_expected_prev[9] )
		&& ((Instruction_OUT_expected_prev[9] !== last_Instruction_OUT_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[9] = Instruction_OUT_expected_prev[9];
	end
	if (
		( Instruction_OUT_expected_prev[10] !== 1'bx ) && ( Instruction_OUT_prev[10] !== Instruction_OUT_expected_prev[10] )
		&& ((Instruction_OUT_expected_prev[10] !== last_Instruction_OUT_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[10] = Instruction_OUT_expected_prev[10];
	end
	if (
		( Instruction_OUT_expected_prev[11] !== 1'bx ) && ( Instruction_OUT_prev[11] !== Instruction_OUT_expected_prev[11] )
		&& ((Instruction_OUT_expected_prev[11] !== last_Instruction_OUT_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[11] = Instruction_OUT_expected_prev[11];
	end
	if (
		( Instruction_OUT_expected_prev[12] !== 1'bx ) && ( Instruction_OUT_prev[12] !== Instruction_OUT_expected_prev[12] )
		&& ((Instruction_OUT_expected_prev[12] !== last_Instruction_OUT_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[12] = Instruction_OUT_expected_prev[12];
	end
	if (
		( Instruction_OUT_expected_prev[13] !== 1'bx ) && ( Instruction_OUT_prev[13] !== Instruction_OUT_expected_prev[13] )
		&& ((Instruction_OUT_expected_prev[13] !== last_Instruction_OUT_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[13] = Instruction_OUT_expected_prev[13];
	end
	if (
		( Instruction_OUT_expected_prev[14] !== 1'bx ) && ( Instruction_OUT_prev[14] !== Instruction_OUT_expected_prev[14] )
		&& ((Instruction_OUT_expected_prev[14] !== last_Instruction_OUT_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[14] = Instruction_OUT_expected_prev[14];
	end
	if (
		( Instruction_OUT_expected_prev[15] !== 1'bx ) && ( Instruction_OUT_prev[15] !== Instruction_OUT_expected_prev[15] )
		&& ((Instruction_OUT_expected_prev[15] !== last_Instruction_OUT_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_OUT_expected_prev);
		$display ("     Real value = %b", Instruction_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_OUT_exp[15] = Instruction_OUT_expected_prev[15];
	end
	if (
		( JAL_expected_prev !== 1'bx ) && ( JAL_prev !== JAL_expected_prev )
		&& ((JAL_expected_prev !== last_JAL_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JAL_expected_prev);
		$display ("     Real value = %b", JAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_JAL_exp = JAL_expected_prev;
	end
	if (
		( Jump_expected_prev !== 1'bx ) && ( Jump_prev !== Jump_expected_prev )
		&& ((Jump_expected_prev !== last_Jump_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Jump_expected_prev);
		$display ("     Real value = %b", Jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Jump_exp = Jump_expected_prev;
	end
	if (
		( Operand2_OUT_expected_prev[0] !== 1'bx ) && ( Operand2_OUT_prev[0] !== Operand2_OUT_expected_prev[0] )
		&& ((Operand2_OUT_expected_prev[0] !== last_Operand2_OUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[0] = Operand2_OUT_expected_prev[0];
	end
	if (
		( Operand2_OUT_expected_prev[1] !== 1'bx ) && ( Operand2_OUT_prev[1] !== Operand2_OUT_expected_prev[1] )
		&& ((Operand2_OUT_expected_prev[1] !== last_Operand2_OUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[1] = Operand2_OUT_expected_prev[1];
	end
	if (
		( Operand2_OUT_expected_prev[2] !== 1'bx ) && ( Operand2_OUT_prev[2] !== Operand2_OUT_expected_prev[2] )
		&& ((Operand2_OUT_expected_prev[2] !== last_Operand2_OUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[2] = Operand2_OUT_expected_prev[2];
	end
	if (
		( Operand2_OUT_expected_prev[3] !== 1'bx ) && ( Operand2_OUT_prev[3] !== Operand2_OUT_expected_prev[3] )
		&& ((Operand2_OUT_expected_prev[3] !== last_Operand2_OUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[3] = Operand2_OUT_expected_prev[3];
	end
	if (
		( Operand2_OUT_expected_prev[4] !== 1'bx ) && ( Operand2_OUT_prev[4] !== Operand2_OUT_expected_prev[4] )
		&& ((Operand2_OUT_expected_prev[4] !== last_Operand2_OUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[4] = Operand2_OUT_expected_prev[4];
	end
	if (
		( Operand2_OUT_expected_prev[5] !== 1'bx ) && ( Operand2_OUT_prev[5] !== Operand2_OUT_expected_prev[5] )
		&& ((Operand2_OUT_expected_prev[5] !== last_Operand2_OUT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[5] = Operand2_OUT_expected_prev[5];
	end
	if (
		( Operand2_OUT_expected_prev[6] !== 1'bx ) && ( Operand2_OUT_prev[6] !== Operand2_OUT_expected_prev[6] )
		&& ((Operand2_OUT_expected_prev[6] !== last_Operand2_OUT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[6] = Operand2_OUT_expected_prev[6];
	end
	if (
		( Operand2_OUT_expected_prev[7] !== 1'bx ) && ( Operand2_OUT_prev[7] !== Operand2_OUT_expected_prev[7] )
		&& ((Operand2_OUT_expected_prev[7] !== last_Operand2_OUT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_OUT_expected_prev);
		$display ("     Real value = %b", Operand2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Operand2_OUT_exp[7] = Operand2_OUT_expected_prev[7];
	end
	if (
		( PC_OUT_expected_prev[0] !== 1'bx ) && ( PC_OUT_prev[0] !== PC_OUT_expected_prev[0] )
		&& ((PC_OUT_expected_prev[0] !== last_PC_OUT_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[0] = PC_OUT_expected_prev[0];
	end
	if (
		( PC_OUT_expected_prev[1] !== 1'bx ) && ( PC_OUT_prev[1] !== PC_OUT_expected_prev[1] )
		&& ((PC_OUT_expected_prev[1] !== last_PC_OUT_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[1] = PC_OUT_expected_prev[1];
	end
	if (
		( PC_OUT_expected_prev[2] !== 1'bx ) && ( PC_OUT_prev[2] !== PC_OUT_expected_prev[2] )
		&& ((PC_OUT_expected_prev[2] !== last_PC_OUT_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[2] = PC_OUT_expected_prev[2];
	end
	if (
		( PC_OUT_expected_prev[3] !== 1'bx ) && ( PC_OUT_prev[3] !== PC_OUT_expected_prev[3] )
		&& ((PC_OUT_expected_prev[3] !== last_PC_OUT_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[3] = PC_OUT_expected_prev[3];
	end
	if (
		( PC_OUT_expected_prev[4] !== 1'bx ) && ( PC_OUT_prev[4] !== PC_OUT_expected_prev[4] )
		&& ((PC_OUT_expected_prev[4] !== last_PC_OUT_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[4] = PC_OUT_expected_prev[4];
	end
	if (
		( PC_OUT_expected_prev[5] !== 1'bx ) && ( PC_OUT_prev[5] !== PC_OUT_expected_prev[5] )
		&& ((PC_OUT_expected_prev[5] !== last_PC_OUT_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[5] = PC_OUT_expected_prev[5];
	end
	if (
		( PC_OUT_expected_prev[6] !== 1'bx ) && ( PC_OUT_prev[6] !== PC_OUT_expected_prev[6] )
		&& ((PC_OUT_expected_prev[6] !== last_PC_OUT_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[6] = PC_OUT_expected_prev[6];
	end
	if (
		( PC_OUT_expected_prev[7] !== 1'bx ) && ( PC_OUT_prev[7] !== PC_OUT_expected_prev[7] )
		&& ((PC_OUT_expected_prev[7] !== last_PC_OUT_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_OUT_exp[7] = PC_OUT_expected_prev[7];
	end
	if (
		( Read_Data_OUT_expected_prev[0] !== 1'bx ) && ( Read_Data_OUT_prev[0] !== Read_Data_OUT_expected_prev[0] )
		&& ((Read_Data_OUT_expected_prev[0] !== last_Read_Data_OUT_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[0] = Read_Data_OUT_expected_prev[0];
	end
	if (
		( Read_Data_OUT_expected_prev[1] !== 1'bx ) && ( Read_Data_OUT_prev[1] !== Read_Data_OUT_expected_prev[1] )
		&& ((Read_Data_OUT_expected_prev[1] !== last_Read_Data_OUT_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[1] = Read_Data_OUT_expected_prev[1];
	end
	if (
		( Read_Data_OUT_expected_prev[2] !== 1'bx ) && ( Read_Data_OUT_prev[2] !== Read_Data_OUT_expected_prev[2] )
		&& ((Read_Data_OUT_expected_prev[2] !== last_Read_Data_OUT_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[2] = Read_Data_OUT_expected_prev[2];
	end
	if (
		( Read_Data_OUT_expected_prev[3] !== 1'bx ) && ( Read_Data_OUT_prev[3] !== Read_Data_OUT_expected_prev[3] )
		&& ((Read_Data_OUT_expected_prev[3] !== last_Read_Data_OUT_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[3] = Read_Data_OUT_expected_prev[3];
	end
	if (
		( Read_Data_OUT_expected_prev[4] !== 1'bx ) && ( Read_Data_OUT_prev[4] !== Read_Data_OUT_expected_prev[4] )
		&& ((Read_Data_OUT_expected_prev[4] !== last_Read_Data_OUT_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[4] = Read_Data_OUT_expected_prev[4];
	end
	if (
		( Read_Data_OUT_expected_prev[5] !== 1'bx ) && ( Read_Data_OUT_prev[5] !== Read_Data_OUT_expected_prev[5] )
		&& ((Read_Data_OUT_expected_prev[5] !== last_Read_Data_OUT_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[5] = Read_Data_OUT_expected_prev[5];
	end
	if (
		( Read_Data_OUT_expected_prev[6] !== 1'bx ) && ( Read_Data_OUT_prev[6] !== Read_Data_OUT_expected_prev[6] )
		&& ((Read_Data_OUT_expected_prev[6] !== last_Read_Data_OUT_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[6] = Read_Data_OUT_expected_prev[6];
	end
	if (
		( Read_Data_OUT_expected_prev[7] !== 1'bx ) && ( Read_Data_OUT_prev[7] !== Read_Data_OUT_expected_prev[7] )
		&& ((Read_Data_OUT_expected_prev[7] !== last_Read_Data_OUT_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[7] = Read_Data_OUT_expected_prev[7];
	end
	if (
		( Read_Data_OUT_expected_prev[8] !== 1'bx ) && ( Read_Data_OUT_prev[8] !== Read_Data_OUT_expected_prev[8] )
		&& ((Read_Data_OUT_expected_prev[8] !== last_Read_Data_OUT_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[8] = Read_Data_OUT_expected_prev[8];
	end
	if (
		( Read_Data_OUT_expected_prev[9] !== 1'bx ) && ( Read_Data_OUT_prev[9] !== Read_Data_OUT_expected_prev[9] )
		&& ((Read_Data_OUT_expected_prev[9] !== last_Read_Data_OUT_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[9] = Read_Data_OUT_expected_prev[9];
	end
	if (
		( Read_Data_OUT_expected_prev[10] !== 1'bx ) && ( Read_Data_OUT_prev[10] !== Read_Data_OUT_expected_prev[10] )
		&& ((Read_Data_OUT_expected_prev[10] !== last_Read_Data_OUT_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[10] = Read_Data_OUT_expected_prev[10];
	end
	if (
		( Read_Data_OUT_expected_prev[11] !== 1'bx ) && ( Read_Data_OUT_prev[11] !== Read_Data_OUT_expected_prev[11] )
		&& ((Read_Data_OUT_expected_prev[11] !== last_Read_Data_OUT_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[11] = Read_Data_OUT_expected_prev[11];
	end
	if (
		( Read_Data_OUT_expected_prev[12] !== 1'bx ) && ( Read_Data_OUT_prev[12] !== Read_Data_OUT_expected_prev[12] )
		&& ((Read_Data_OUT_expected_prev[12] !== last_Read_Data_OUT_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[12] = Read_Data_OUT_expected_prev[12];
	end
	if (
		( Read_Data_OUT_expected_prev[13] !== 1'bx ) && ( Read_Data_OUT_prev[13] !== Read_Data_OUT_expected_prev[13] )
		&& ((Read_Data_OUT_expected_prev[13] !== last_Read_Data_OUT_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[13] = Read_Data_OUT_expected_prev[13];
	end
	if (
		( Read_Data_OUT_expected_prev[14] !== 1'bx ) && ( Read_Data_OUT_prev[14] !== Read_Data_OUT_expected_prev[14] )
		&& ((Read_Data_OUT_expected_prev[14] !== last_Read_Data_OUT_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[14] = Read_Data_OUT_expected_prev[14];
	end
	if (
		( Read_Data_OUT_expected_prev[15] !== 1'bx ) && ( Read_Data_OUT_prev[15] !== Read_Data_OUT_expected_prev[15] )
		&& ((Read_Data_OUT_expected_prev[15] !== last_Read_Data_OUT_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_OUT_expected_prev);
		$display ("     Real value = %b", Read_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_OUT_exp[15] = Read_Data_OUT_expected_prev[15];
	end
	if (
		( Reg1_OUT_expected_prev[0] !== 1'bx ) && ( Reg1_OUT_prev[0] !== Reg1_OUT_expected_prev[0] )
		&& ((Reg1_OUT_expected_prev[0] !== last_Reg1_OUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[0] = Reg1_OUT_expected_prev[0];
	end
	if (
		( Reg1_OUT_expected_prev[1] !== 1'bx ) && ( Reg1_OUT_prev[1] !== Reg1_OUT_expected_prev[1] )
		&& ((Reg1_OUT_expected_prev[1] !== last_Reg1_OUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[1] = Reg1_OUT_expected_prev[1];
	end
	if (
		( Reg1_OUT_expected_prev[2] !== 1'bx ) && ( Reg1_OUT_prev[2] !== Reg1_OUT_expected_prev[2] )
		&& ((Reg1_OUT_expected_prev[2] !== last_Reg1_OUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[2] = Reg1_OUT_expected_prev[2];
	end
	if (
		( Reg1_OUT_expected_prev[3] !== 1'bx ) && ( Reg1_OUT_prev[3] !== Reg1_OUT_expected_prev[3] )
		&& ((Reg1_OUT_expected_prev[3] !== last_Reg1_OUT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[3] = Reg1_OUT_expected_prev[3];
	end
	if (
		( Reg1_OUT_expected_prev[4] !== 1'bx ) && ( Reg1_OUT_prev[4] !== Reg1_OUT_expected_prev[4] )
		&& ((Reg1_OUT_expected_prev[4] !== last_Reg1_OUT_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[4] = Reg1_OUT_expected_prev[4];
	end
	if (
		( Reg1_OUT_expected_prev[5] !== 1'bx ) && ( Reg1_OUT_prev[5] !== Reg1_OUT_expected_prev[5] )
		&& ((Reg1_OUT_expected_prev[5] !== last_Reg1_OUT_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[5] = Reg1_OUT_expected_prev[5];
	end
	if (
		( Reg1_OUT_expected_prev[6] !== 1'bx ) && ( Reg1_OUT_prev[6] !== Reg1_OUT_expected_prev[6] )
		&& ((Reg1_OUT_expected_prev[6] !== last_Reg1_OUT_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[6] = Reg1_OUT_expected_prev[6];
	end
	if (
		( Reg1_OUT_expected_prev[7] !== 1'bx ) && ( Reg1_OUT_prev[7] !== Reg1_OUT_expected_prev[7] )
		&& ((Reg1_OUT_expected_prev[7] !== last_Reg1_OUT_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_OUT_expected_prev);
		$display ("     Real value = %b", Reg1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Reg1_OUT_exp[7] = Reg1_OUT_expected_prev[7];
	end
	if (
		( Reg2_OUT_expected_prev[0] !== 1'bx ) && ( Reg2_OUT_prev[0] !== Reg2_OUT_expected_prev[0] )
		&& ((Reg2_OUT_expected_prev[0] !== last_Reg2_OUT_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[0] = Reg2_OUT_expected_prev[0];
	end
	if (
		( Reg2_OUT_expected_prev[1] !== 1'bx ) && ( Reg2_OUT_prev[1] !== Reg2_OUT_expected_prev[1] )
		&& ((Reg2_OUT_expected_prev[1] !== last_Reg2_OUT_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[1] = Reg2_OUT_expected_prev[1];
	end
	if (
		( Reg2_OUT_expected_prev[2] !== 1'bx ) && ( Reg2_OUT_prev[2] !== Reg2_OUT_expected_prev[2] )
		&& ((Reg2_OUT_expected_prev[2] !== last_Reg2_OUT_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[2] = Reg2_OUT_expected_prev[2];
	end
	if (
		( Reg2_OUT_expected_prev[3] !== 1'bx ) && ( Reg2_OUT_prev[3] !== Reg2_OUT_expected_prev[3] )
		&& ((Reg2_OUT_expected_prev[3] !== last_Reg2_OUT_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[3] = Reg2_OUT_expected_prev[3];
	end
	if (
		( Reg2_OUT_expected_prev[4] !== 1'bx ) && ( Reg2_OUT_prev[4] !== Reg2_OUT_expected_prev[4] )
		&& ((Reg2_OUT_expected_prev[4] !== last_Reg2_OUT_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[4] = Reg2_OUT_expected_prev[4];
	end
	if (
		( Reg2_OUT_expected_prev[5] !== 1'bx ) && ( Reg2_OUT_prev[5] !== Reg2_OUT_expected_prev[5] )
		&& ((Reg2_OUT_expected_prev[5] !== last_Reg2_OUT_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[5] = Reg2_OUT_expected_prev[5];
	end
	if (
		( Reg2_OUT_expected_prev[6] !== 1'bx ) && ( Reg2_OUT_prev[6] !== Reg2_OUT_expected_prev[6] )
		&& ((Reg2_OUT_expected_prev[6] !== last_Reg2_OUT_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[6] = Reg2_OUT_expected_prev[6];
	end
	if (
		( Reg2_OUT_expected_prev[7] !== 1'bx ) && ( Reg2_OUT_prev[7] !== Reg2_OUT_expected_prev[7] )
		&& ((Reg2_OUT_expected_prev[7] !== last_Reg2_OUT_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_OUT_expected_prev);
		$display ("     Real value = %b", Reg2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Reg2_OUT_exp[7] = Reg2_OUT_expected_prev[7];
	end
	if (
		( Write_Data_OUT_expected_prev[0] !== 1'bx ) && ( Write_Data_OUT_prev[0] !== Write_Data_OUT_expected_prev[0] )
		&& ((Write_Data_OUT_expected_prev[0] !== last_Write_Data_OUT_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[0] = Write_Data_OUT_expected_prev[0];
	end
	if (
		( Write_Data_OUT_expected_prev[1] !== 1'bx ) && ( Write_Data_OUT_prev[1] !== Write_Data_OUT_expected_prev[1] )
		&& ((Write_Data_OUT_expected_prev[1] !== last_Write_Data_OUT_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[1] = Write_Data_OUT_expected_prev[1];
	end
	if (
		( Write_Data_OUT_expected_prev[2] !== 1'bx ) && ( Write_Data_OUT_prev[2] !== Write_Data_OUT_expected_prev[2] )
		&& ((Write_Data_OUT_expected_prev[2] !== last_Write_Data_OUT_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[2] = Write_Data_OUT_expected_prev[2];
	end
	if (
		( Write_Data_OUT_expected_prev[3] !== 1'bx ) && ( Write_Data_OUT_prev[3] !== Write_Data_OUT_expected_prev[3] )
		&& ((Write_Data_OUT_expected_prev[3] !== last_Write_Data_OUT_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[3] = Write_Data_OUT_expected_prev[3];
	end
	if (
		( Write_Data_OUT_expected_prev[4] !== 1'bx ) && ( Write_Data_OUT_prev[4] !== Write_Data_OUT_expected_prev[4] )
		&& ((Write_Data_OUT_expected_prev[4] !== last_Write_Data_OUT_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[4] = Write_Data_OUT_expected_prev[4];
	end
	if (
		( Write_Data_OUT_expected_prev[5] !== 1'bx ) && ( Write_Data_OUT_prev[5] !== Write_Data_OUT_expected_prev[5] )
		&& ((Write_Data_OUT_expected_prev[5] !== last_Write_Data_OUT_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[5] = Write_Data_OUT_expected_prev[5];
	end
	if (
		( Write_Data_OUT_expected_prev[6] !== 1'bx ) && ( Write_Data_OUT_prev[6] !== Write_Data_OUT_expected_prev[6] )
		&& ((Write_Data_OUT_expected_prev[6] !== last_Write_Data_OUT_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[6] = Write_Data_OUT_expected_prev[6];
	end
	if (
		( Write_Data_OUT_expected_prev[7] !== 1'bx ) && ( Write_Data_OUT_prev[7] !== Write_Data_OUT_expected_prev[7] )
		&& ((Write_Data_OUT_expected_prev[7] !== last_Write_Data_OUT_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_OUT_expected_prev);
		$display ("     Real value = %b", Write_Data_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Write_Data_OUT_exp[7] = Write_Data_OUT_expected_prev[7];
	end
	if (
		( Write_Register_OUT_expected_prev[0] !== 1'bx ) && ( Write_Register_OUT_prev[0] !== Write_Register_OUT_expected_prev[0] )
		&& ((Write_Register_OUT_expected_prev[0] !== last_Write_Register_OUT_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_OUT_expected_prev);
		$display ("     Real value = %b", Write_Register_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Write_Register_OUT_exp[0] = Write_Register_OUT_expected_prev[0];
	end
	if (
		( Write_Register_OUT_expected_prev[1] !== 1'bx ) && ( Write_Register_OUT_prev[1] !== Write_Register_OUT_expected_prev[1] )
		&& ((Write_Register_OUT_expected_prev[1] !== last_Write_Register_OUT_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_OUT_expected_prev);
		$display ("     Real value = %b", Write_Register_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Write_Register_OUT_exp[1] = Write_Register_OUT_expected_prev[1];
	end
	if (
		( Write_Register_OUT_expected_prev[2] !== 1'bx ) && ( Write_Register_OUT_prev[2] !== Write_Register_OUT_expected_prev[2] )
		&& ((Write_Register_OUT_expected_prev[2] !== last_Write_Register_OUT_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_OUT_expected_prev);
		$display ("     Real value = %b", Write_Register_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Write_Register_OUT_exp[2] = Write_Register_OUT_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( WriteData_expected_prev[8] !== 1'bx ) && ( WriteData_prev[8] !== WriteData_expected_prev[8] )
		&& ((WriteData_expected_prev[8] !== last_WriteData_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[8] = WriteData_expected_prev[8];
	end
	if (
		( WriteData_expected_prev[9] !== 1'bx ) && ( WriteData_prev[9] !== WriteData_expected_prev[9] )
		&& ((WriteData_expected_prev[9] !== last_WriteData_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[9] = WriteData_expected_prev[9];
	end
	if (
		( WriteData_expected_prev[10] !== 1'bx ) && ( WriteData_prev[10] !== WriteData_expected_prev[10] )
		&& ((WriteData_expected_prev[10] !== last_WriteData_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[10] = WriteData_expected_prev[10];
	end
	if (
		( WriteData_expected_prev[11] !== 1'bx ) && ( WriteData_prev[11] !== WriteData_expected_prev[11] )
		&& ((WriteData_expected_prev[11] !== last_WriteData_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[11] = WriteData_expected_prev[11];
	end
	if (
		( WriteData_expected_prev[12] !== 1'bx ) && ( WriteData_prev[12] !== WriteData_expected_prev[12] )
		&& ((WriteData_expected_prev[12] !== last_WriteData_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[12] = WriteData_expected_prev[12];
	end
	if (
		( WriteData_expected_prev[13] !== 1'bx ) && ( WriteData_prev[13] !== WriteData_expected_prev[13] )
		&& ((WriteData_expected_prev[13] !== last_WriteData_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[13] = WriteData_expected_prev[13];
	end
	if (
		( WriteData_expected_prev[14] !== 1'bx ) && ( WriteData_prev[14] !== WriteData_expected_prev[14] )
		&& ((WriteData_expected_prev[14] !== last_WriteData_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[14] = WriteData_expected_prev[14];
	end
	if (
		( WriteData_expected_prev[15] !== 1'bx ) && ( WriteData_prev[15] !== WriteData_expected_prev[15] )
		&& ((WriteData_expected_prev[15] !== last_WriteData_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WriteData_exp[15] = WriteData_expected_prev[15];
	end
	if (
		( ZERO_expected_prev !== 1'bx ) && ( ZERO_prev !== ZERO_expected_prev )
		&& ((ZERO_expected_prev !== last_ZERO_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_expected_prev);
		$display ("     Real value = %b", ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ZERO_exp = ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU_ENABLE;
reg CLOCK;
// wires                                               
wire [7:0] Address;
wire [7:0] ALU_result_OUT;
wire Branch;
wire [15:0] Instruction_OUT;
wire JAL;
wire Jump;
wire [7:0] Operand2_OUT;
wire [7:0] PC_OUT;
wire [15:0] Read_Data_OUT;
wire [7:0] Reg1_OUT;
wire [7:0] Reg2_OUT;
wire [7:0] Write_Data_OUT;
wire [2:0] Write_Register_OUT;
wire [15:0] WriteData;
wire ZERO;

wire sampler;                             

// assign statements (if any)                          
MIPS_CPU i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.ALU_ENABLE(ALU_ENABLE),
	.ALU_result_OUT(ALU_result_OUT),
	.Branch(Branch),
	.CLOCK(CLOCK),
	.Instruction_OUT(Instruction_OUT),
	.JAL(JAL),
	.Jump(Jump),
	.Operand2_OUT(Operand2_OUT),
	.PC_OUT(PC_OUT),
	.Read_Data_OUT(Read_Data_OUT),
	.Reg1_OUT(Reg1_OUT),
	.Reg2_OUT(Reg2_OUT),
	.Write_Data_OUT(Write_Data_OUT),
	.Write_Register_OUT(Write_Register_OUT),
	.WriteData(WriteData),
	.ZERO(ZERO)
);

// ALU_ENABLE
initial
begin
	ALU_ENABLE = 1'b1;
end 

// CLOCK
initial
begin
	repeat(333)
	begin
		CLOCK = 1'b0;
		CLOCK = #15000 1'b1;
		# 15000;
	end
	CLOCK = 1'b0;
end 

MIPS_CPU_vlg_sample_tst tb_sample (
	.ALU_ENABLE(ALU_ENABLE),
	.CLOCK(CLOCK),
	.sampler_tx(sampler)
);

MIPS_CPU_vlg_check_tst tb_out(
	.Address(Address),
	.ALU_result_OUT(ALU_result_OUT),
	.Branch(Branch),
	.Instruction_OUT(Instruction_OUT),
	.JAL(JAL),
	.Jump(Jump),
	.Operand2_OUT(Operand2_OUT),
	.PC_OUT(PC_OUT),
	.Read_Data_OUT(Read_Data_OUT),
	.Reg1_OUT(Reg1_OUT),
	.Reg2_OUT(Reg2_OUT),
	.Write_Data_OUT(Write_Data_OUT),
	.Write_Register_OUT(Write_Register_OUT),
	.WriteData(WriteData),
	.ZERO(ZERO),
	.sampler_rx(sampler)
);
endmodule

