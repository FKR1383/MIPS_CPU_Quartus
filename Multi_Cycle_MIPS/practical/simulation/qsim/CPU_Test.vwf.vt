// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2024 19:15:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_CPU_MULTI_CYCLE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_CPU_MULTI_CYCLE_vlg_sample_tst(
	CLOCK,
	sampler_tx
);
input  CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_CPU_MULTI_CYCLE_vlg_check_tst (
	A,
	ALU_OUT,
	ALUOp,
	ALUSrcA,
	ALUSrcB,
	B,
	Instruction,
	IorD,
	IRWrite,
	Mem,
	MemRead,
	MemtoReg,
	MemWrite,
	PC,
	PCSource,
	PCWrite,
	Reg1,
	Reg2,
	RegDst,
	RegWrite,
	WriteData,
	ZERO,
	sampler_rx
);
input [7:0] A;
input [7:0] ALU_OUT;
input [3:0] ALUOp;
input  ALUSrcA;
input [1:0] ALUSrcB;
input [7:0] B;
input [15:0] Instruction;
input  IorD;
input  IRWrite;
input [15:0] Mem;
input  MemRead;
input  MemtoReg;
input  MemWrite;
input [7:0] PC;
input [1:0] PCSource;
input  PCWrite;
input [7:0] Reg1;
input [7:0] Reg2;
input [1:0] RegDst;
input  RegWrite;
input [7:0] WriteData;
input  ZERO;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] ALU_OUT_expected;
reg [3:0] ALUOp_expected;
reg  ALUSrcA_expected;
reg [1:0] ALUSrcB_expected;
reg [7:0] B_expected;
reg [15:0] Instruction_expected;
reg  IorD_expected;
reg  IRWrite_expected;
reg [15:0] Mem_expected;
reg  MemRead_expected;
reg  MemtoReg_expected;
reg  MemWrite_expected;
reg [7:0] PC_expected;
reg [1:0] PCSource_expected;
reg  PCWrite_expected;
reg [7:0] Reg1_expected;
reg [7:0] Reg2_expected;
reg [1:0] RegDst_expected;
reg  RegWrite_expected;
reg [7:0] WriteData_expected;
reg  ZERO_expected;

reg [7:0] A_prev;
reg [7:0] ALU_OUT_prev;
reg [3:0] ALUOp_prev;
reg  ALUSrcA_prev;
reg [1:0] ALUSrcB_prev;
reg [7:0] B_prev;
reg [15:0] Instruction_prev;
reg  IorD_prev;
reg  IRWrite_prev;
reg [15:0] Mem_prev;
reg  MemRead_prev;
reg  MemtoReg_prev;
reg  MemWrite_prev;
reg [7:0] PC_prev;
reg [1:0] PCSource_prev;
reg  PCWrite_prev;
reg [7:0] Reg1_prev;
reg [7:0] Reg2_prev;
reg [1:0] RegDst_prev;
reg  RegWrite_prev;
reg [7:0] WriteData_prev;
reg  ZERO_prev;

reg [7:0] A_expected_prev;
reg [7:0] ALU_OUT_expected_prev;
reg [3:0] ALUOp_expected_prev;
reg  ALUSrcA_expected_prev;
reg [1:0] ALUSrcB_expected_prev;
reg [7:0] B_expected_prev;
reg [15:0] Instruction_expected_prev;
reg  IorD_expected_prev;
reg  IRWrite_expected_prev;
reg [15:0] Mem_expected_prev;
reg  MemRead_expected_prev;
reg  MemtoReg_expected_prev;
reg  MemWrite_expected_prev;
reg [7:0] PC_expected_prev;
reg [1:0] PCSource_expected_prev;
reg  PCWrite_expected_prev;
reg [7:0] Reg1_expected_prev;
reg [7:0] Reg2_expected_prev;
reg [1:0] RegDst_expected_prev;
reg  RegWrite_expected_prev;
reg [7:0] WriteData_expected_prev;
reg  ZERO_expected_prev;

reg [7:0] last_A_exp;
reg [7:0] last_ALU_OUT_exp;
reg [3:0] last_ALUOp_exp;
reg  last_ALUSrcA_exp;
reg [1:0] last_ALUSrcB_exp;
reg [7:0] last_B_exp;
reg [15:0] last_Instruction_exp;
reg  last_IorD_exp;
reg  last_IRWrite_exp;
reg [15:0] last_Mem_exp;
reg  last_MemRead_exp;
reg  last_MemtoReg_exp;
reg  last_MemWrite_exp;
reg [7:0] last_PC_exp;
reg [1:0] last_PCSource_exp;
reg  last_PCWrite_exp;
reg [7:0] last_Reg1_exp;
reg [7:0] last_Reg2_exp;
reg [1:0] last_RegDst_exp;
reg  last_RegWrite_exp;
reg [7:0] last_WriteData_exp;
reg  last_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	ALU_OUT_prev = ALU_OUT;
	ALUOp_prev = ALUOp;
	ALUSrcA_prev = ALUSrcA;
	ALUSrcB_prev = ALUSrcB;
	B_prev = B;
	Instruction_prev = Instruction;
	IorD_prev = IorD;
	IRWrite_prev = IRWrite;
	Mem_prev = Mem;
	MemRead_prev = MemRead;
	MemtoReg_prev = MemtoReg;
	MemWrite_prev = MemWrite;
	PC_prev = PC;
	PCSource_prev = PCSource;
	PCWrite_prev = PCWrite;
	Reg1_prev = Reg1;
	Reg2_prev = Reg2;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
	WriteData_prev = WriteData;
	ZERO_prev = ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	ALU_OUT_expected_prev = ALU_OUT_expected;
	ALUOp_expected_prev = ALUOp_expected;
	ALUSrcA_expected_prev = ALUSrcA_expected;
	ALUSrcB_expected_prev = ALUSrcB_expected;
	B_expected_prev = B_expected;
	Instruction_expected_prev = Instruction_expected;
	IorD_expected_prev = IorD_expected;
	IRWrite_expected_prev = IRWrite_expected;
	Mem_expected_prev = Mem_expected;
	MemRead_expected_prev = MemRead_expected;
	MemtoReg_expected_prev = MemtoReg_expected;
	MemWrite_expected_prev = MemWrite_expected;
	PC_expected_prev = PC_expected;
	PCSource_expected_prev = PCSource_expected;
	PCWrite_expected_prev = PCWrite_expected;
	Reg1_expected_prev = Reg1_expected;
	Reg2_expected_prev = Reg2_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
	WriteData_expected_prev = WriteData_expected;
	ZERO_expected_prev = ZERO_expected;
end


// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
	A_expected[7] = #999000 1'b0;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
	A_expected[6] = #999000 1'b0;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
	A_expected[5] = #999000 1'b0;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
	A_expected[4] = #999000 1'b0;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
	A_expected[3] = #999000 1'b0;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
	A_expected[2] = #999000 1'b0;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
	A_expected[1] = #999000 1'b0;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
	A_expected[0] = #999000 1'b0;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
	ALU_OUT_expected[7] = #999000 1'b0;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
	ALU_OUT_expected[6] = #999000 1'b0;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
	ALU_OUT_expected[5] = #999000 1'b0;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
	ALU_OUT_expected[4] = #999000 1'b0;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
	ALU_OUT_expected[3] = #999000 1'b0;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
	ALU_OUT_expected[2] = #999000 1'b0;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
	ALU_OUT_expected[1] = #999000 1'b0;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
	ALU_OUT_expected[0] = #999000 1'b0;
end 
// expected ALUOp[ 3 ]
initial
begin
	ALUOp_expected[3] = 1'bX;
	ALUOp_expected[3] = #999000 1'b0;
end 
// expected ALUOp[ 2 ]
initial
begin
	ALUOp_expected[2] = 1'bX;
	ALUOp_expected[2] = #999000 1'b0;
end 
// expected ALUOp[ 1 ]
initial
begin
	ALUOp_expected[1] = 1'bX;
	ALUOp_expected[1] = #999000 1'b0;
end 
// expected ALUOp[ 0 ]
initial
begin
	ALUOp_expected[0] = 1'bX;
	ALUOp_expected[0] = #999000 1'b0;
end 

// expected ALUSrcA
initial
begin
	ALUSrcA_expected = 1'bX;
end 
// expected ALUSrcB[ 1 ]
initial
begin
	ALUSrcB_expected[1] = 1'bX;
	ALUSrcB_expected[1] = #999000 1'b0;
end 
// expected ALUSrcB[ 0 ]
initial
begin
	ALUSrcB_expected[0] = 1'bX;
	ALUSrcB_expected[0] = #999000 1'b0;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
	B_expected[7] = #999000 1'b0;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
	B_expected[6] = #999000 1'b0;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
	B_expected[5] = #999000 1'b0;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
	B_expected[4] = #999000 1'b0;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
	B_expected[3] = #999000 1'b0;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
	B_expected[2] = #999000 1'b0;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
	B_expected[1] = #999000 1'b0;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
	B_expected[0] = #999000 1'b0;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
	Instruction_expected[15] = #999000 1'b0;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
	Instruction_expected[14] = #999000 1'b0;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
	Instruction_expected[13] = #999000 1'b0;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
	Instruction_expected[12] = #999000 1'b0;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
	Instruction_expected[11] = #999000 1'b0;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
	Instruction_expected[10] = #999000 1'b0;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
	Instruction_expected[9] = #999000 1'b0;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
	Instruction_expected[8] = #999000 1'b0;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
	Instruction_expected[7] = #999000 1'b0;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
	Instruction_expected[6] = #999000 1'b0;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
	Instruction_expected[5] = #999000 1'b0;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
	Instruction_expected[4] = #999000 1'b0;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
	Instruction_expected[3] = #999000 1'b0;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
	Instruction_expected[2] = #999000 1'b0;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
	Instruction_expected[1] = #999000 1'b0;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
	Instruction_expected[0] = #999000 1'b0;
end 

// expected IorD
initial
begin
	IorD_expected = 1'bX;
end 

// expected IRWrite
initial
begin
	IRWrite_expected = 1'bX;
end 
// expected Mem[ 15 ]
initial
begin
	Mem_expected[15] = 1'bX;
	Mem_expected[15] = #999000 1'b0;
end 
// expected Mem[ 14 ]
initial
begin
	Mem_expected[14] = 1'bX;
	Mem_expected[14] = #999000 1'b0;
end 
// expected Mem[ 13 ]
initial
begin
	Mem_expected[13] = 1'bX;
	Mem_expected[13] = #999000 1'b0;
end 
// expected Mem[ 12 ]
initial
begin
	Mem_expected[12] = 1'bX;
	Mem_expected[12] = #999000 1'b0;
end 
// expected Mem[ 11 ]
initial
begin
	Mem_expected[11] = 1'bX;
	Mem_expected[11] = #999000 1'b0;
end 
// expected Mem[ 10 ]
initial
begin
	Mem_expected[10] = 1'bX;
	Mem_expected[10] = #999000 1'b0;
end 
// expected Mem[ 9 ]
initial
begin
	Mem_expected[9] = 1'bX;
	Mem_expected[9] = #999000 1'b0;
end 
// expected Mem[ 8 ]
initial
begin
	Mem_expected[8] = 1'bX;
	Mem_expected[8] = #999000 1'b0;
end 
// expected Mem[ 7 ]
initial
begin
	Mem_expected[7] = 1'bX;
	Mem_expected[7] = #999000 1'b0;
end 
// expected Mem[ 6 ]
initial
begin
	Mem_expected[6] = 1'bX;
	Mem_expected[6] = #999000 1'b0;
end 
// expected Mem[ 5 ]
initial
begin
	Mem_expected[5] = 1'bX;
	Mem_expected[5] = #999000 1'b0;
end 
// expected Mem[ 4 ]
initial
begin
	Mem_expected[4] = 1'bX;
	Mem_expected[4] = #999000 1'b0;
end 
// expected Mem[ 3 ]
initial
begin
	Mem_expected[3] = 1'bX;
	Mem_expected[3] = #999000 1'b0;
end 
// expected Mem[ 2 ]
initial
begin
	Mem_expected[2] = 1'bX;
	Mem_expected[2] = #999000 1'b0;
end 
// expected Mem[ 1 ]
initial
begin
	Mem_expected[1] = 1'bX;
	Mem_expected[1] = #999000 1'b0;
end 
// expected Mem[ 0 ]
initial
begin
	Mem_expected[0] = 1'bX;
	Mem_expected[0] = #999000 1'b0;
end 

// expected MemRead
initial
begin
	MemRead_expected = 1'bX;
end 

// expected MemtoReg
initial
begin
	MemtoReg_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
	PC_expected[7] = #999000 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
	PC_expected[6] = #999000 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
	PC_expected[5] = #999000 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
	PC_expected[4] = #999000 1'b0;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
	PC_expected[3] = #999000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
	PC_expected[2] = #999000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
	PC_expected[1] = #999000 1'b0;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
	PC_expected[0] = #999000 1'b0;
end 
// expected PCSource[ 1 ]
initial
begin
	PCSource_expected[1] = 1'bX;
	PCSource_expected[1] = #999000 1'b0;
end 
// expected PCSource[ 0 ]
initial
begin
	PCSource_expected[0] = 1'bX;
	PCSource_expected[0] = #999000 1'b0;
end 
// expected Reg1[ 7 ]
initial
begin
	Reg1_expected[7] = 1'bX;
	Reg1_expected[7] = #999000 1'b0;
end 
// expected Reg1[ 6 ]
initial
begin
	Reg1_expected[6] = 1'bX;
	Reg1_expected[6] = #999000 1'b0;
end 
// expected Reg1[ 5 ]
initial
begin
	Reg1_expected[5] = 1'bX;
	Reg1_expected[5] = #999000 1'b0;
end 
// expected Reg1[ 4 ]
initial
begin
	Reg1_expected[4] = 1'bX;
	Reg1_expected[4] = #999000 1'b0;
end 
// expected Reg1[ 3 ]
initial
begin
	Reg1_expected[3] = 1'bX;
	Reg1_expected[3] = #999000 1'b0;
end 
// expected Reg1[ 2 ]
initial
begin
	Reg1_expected[2] = 1'bX;
	Reg1_expected[2] = #999000 1'b0;
end 
// expected Reg1[ 1 ]
initial
begin
	Reg1_expected[1] = 1'bX;
	Reg1_expected[1] = #999000 1'b0;
end 
// expected Reg1[ 0 ]
initial
begin
	Reg1_expected[0] = 1'bX;
	Reg1_expected[0] = #999000 1'b0;
end 
// expected Reg2[ 7 ]
initial
begin
	Reg2_expected[7] = 1'bX;
	Reg2_expected[7] = #999000 1'b0;
end 
// expected Reg2[ 6 ]
initial
begin
	Reg2_expected[6] = 1'bX;
	Reg2_expected[6] = #999000 1'b0;
end 
// expected Reg2[ 5 ]
initial
begin
	Reg2_expected[5] = 1'bX;
	Reg2_expected[5] = #999000 1'b0;
end 
// expected Reg2[ 4 ]
initial
begin
	Reg2_expected[4] = 1'bX;
	Reg2_expected[4] = #999000 1'b0;
end 
// expected Reg2[ 3 ]
initial
begin
	Reg2_expected[3] = 1'bX;
	Reg2_expected[3] = #999000 1'b0;
end 
// expected Reg2[ 2 ]
initial
begin
	Reg2_expected[2] = 1'bX;
	Reg2_expected[2] = #999000 1'b0;
end 
// expected Reg2[ 1 ]
initial
begin
	Reg2_expected[1] = 1'bX;
	Reg2_expected[1] = #999000 1'b0;
end 
// expected Reg2[ 0 ]
initial
begin
	Reg2_expected[0] = 1'bX;
	Reg2_expected[0] = #999000 1'b0;
end 
// expected RegDst[ 1 ]
initial
begin
	RegDst_expected[1] = 1'bX;
	RegDst_expected[1] = #999000 1'b0;
end 
// expected RegDst[ 0 ]
initial
begin
	RegDst_expected[0] = 1'bX;
	RegDst_expected[0] = #999000 1'b0;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 

// expected PCWrite
initial
begin
	PCWrite_expected = 1'bX;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
end 

// expected ZERO
initial
begin
	ZERO_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or ALU_OUT_expected or ALU_OUT or ALUOp_expected or ALUOp or ALUSrcA_expected or ALUSrcA or ALUSrcB_expected or ALUSrcB or B_expected or B or Instruction_expected or Instruction or IorD_expected or IorD or IRWrite_expected or IRWrite or Mem_expected or Mem or MemRead_expected or MemRead or MemtoReg_expected or MemtoReg or MemWrite_expected or MemWrite or PC_expected or PC or PCSource_expected or PCSource or PCWrite_expected or PCWrite or Reg1_expected or Reg1 or Reg2_expected or Reg2 or RegDst_expected or RegDst or RegWrite_expected or RegWrite or WriteData_expected or WriteData or ZERO_expected or ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected ALU_OUT = %b | expected ALUOp = %b | expected ALUSrcA = %b | expected ALUSrcB = %b | expected B = %b | expected Instruction = %b | expected IorD = %b | expected IRWrite = %b | expected Mem = %b | expected MemRead = %b | expected MemtoReg = %b | expected MemWrite = %b | expected PC = %b | expected PCSource = %b | expected PCWrite = %b | expected Reg1 = %b | expected Reg2 = %b | expected RegDst = %b | expected RegWrite = %b | expected WriteData = %b | expected ZERO = %b | ",A_expected_prev,ALU_OUT_expected_prev,ALUOp_expected_prev,ALUSrcA_expected_prev,ALUSrcB_expected_prev,B_expected_prev,Instruction_expected_prev,IorD_expected_prev,IRWrite_expected_prev,Mem_expected_prev,MemRead_expected_prev,MemtoReg_expected_prev,MemWrite_expected_prev,PC_expected_prev,PCSource_expected_prev,PCWrite_expected_prev,Reg1_expected_prev,Reg2_expected_prev,RegDst_expected_prev,RegWrite_expected_prev,WriteData_expected_prev,ZERO_expected_prev);
	$display("| real A = %b | real ALU_OUT = %b | real ALUOp = %b | real ALUSrcA = %b | real ALUSrcB = %b | real B = %b | real Instruction = %b | real IorD = %b | real IRWrite = %b | real Mem = %b | real MemRead = %b | real MemtoReg = %b | real MemWrite = %b | real PC = %b | real PCSource = %b | real PCWrite = %b | real Reg1 = %b | real Reg2 = %b | real RegDst = %b | real RegWrite = %b | real WriteData = %b | real ZERO = %b | ",A_prev,ALU_OUT_prev,ALUOp_prev,ALUSrcA_prev,ALUSrcB_prev,B_prev,Instruction_prev,IorD_prev,IRWrite_prev,Mem_prev,MemRead_prev,MemtoReg_prev,MemWrite_prev,PC_prev,PCSource_prev,PCWrite_prev,Reg1_prev,Reg2_prev,RegDst_prev,RegWrite_prev,WriteData_prev,ZERO_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( ALUOp_expected_prev[0] !== 1'bx ) && ( ALUOp_prev[0] !== ALUOp_expected_prev[0] )
		&& ((ALUOp_expected_prev[0] !== last_ALUOp_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOp_exp[0] = ALUOp_expected_prev[0];
	end
	if (
		( ALUOp_expected_prev[1] !== 1'bx ) && ( ALUOp_prev[1] !== ALUOp_expected_prev[1] )
		&& ((ALUOp_expected_prev[1] !== last_ALUOp_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOp_exp[1] = ALUOp_expected_prev[1];
	end
	if (
		( ALUOp_expected_prev[2] !== 1'bx ) && ( ALUOp_prev[2] !== ALUOp_expected_prev[2] )
		&& ((ALUOp_expected_prev[2] !== last_ALUOp_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOp_exp[2] = ALUOp_expected_prev[2];
	end
	if (
		( ALUOp_expected_prev[3] !== 1'bx ) && ( ALUOp_prev[3] !== ALUOp_expected_prev[3] )
		&& ((ALUOp_expected_prev[3] !== last_ALUOp_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOp_exp[3] = ALUOp_expected_prev[3];
	end
	if (
		( ALUSrcA_expected_prev !== 1'bx ) && ( ALUSrcA_prev !== ALUSrcA_expected_prev )
		&& ((ALUSrcA_expected_prev !== last_ALUSrcA_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcA_expected_prev);
		$display ("     Real value = %b", ALUSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALUSrcA_exp = ALUSrcA_expected_prev;
	end
	if (
		( ALUSrcB_expected_prev[0] !== 1'bx ) && ( ALUSrcB_prev[0] !== ALUSrcB_expected_prev[0] )
		&& ((ALUSrcB_expected_prev[0] !== last_ALUSrcB_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUSrcB_exp[0] = ALUSrcB_expected_prev[0];
	end
	if (
		( ALUSrcB_expected_prev[1] !== 1'bx ) && ( ALUSrcB_prev[1] !== ALUSrcB_expected_prev[1] )
		&& ((ALUSrcB_expected_prev[1] !== last_ALUSrcB_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALUSrcB_exp[1] = ALUSrcB_expected_prev[1];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( IorD_expected_prev !== 1'bx ) && ( IorD_prev !== IorD_expected_prev )
		&& ((IorD_expected_prev !== last_IorD_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IorD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IorD_expected_prev);
		$display ("     Real value = %b", IorD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IorD_exp = IorD_expected_prev;
	end
	if (
		( IRWrite_expected_prev !== 1'bx ) && ( IRWrite_prev !== IRWrite_expected_prev )
		&& ((IRWrite_expected_prev !== last_IRWrite_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRWrite_expected_prev);
		$display ("     Real value = %b", IRWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IRWrite_exp = IRWrite_expected_prev;
	end
	if (
		( Mem_expected_prev[0] !== 1'bx ) && ( Mem_prev[0] !== Mem_expected_prev[0] )
		&& ((Mem_expected_prev[0] !== last_Mem_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[0] = Mem_expected_prev[0];
	end
	if (
		( Mem_expected_prev[1] !== 1'bx ) && ( Mem_prev[1] !== Mem_expected_prev[1] )
		&& ((Mem_expected_prev[1] !== last_Mem_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[1] = Mem_expected_prev[1];
	end
	if (
		( Mem_expected_prev[2] !== 1'bx ) && ( Mem_prev[2] !== Mem_expected_prev[2] )
		&& ((Mem_expected_prev[2] !== last_Mem_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[2] = Mem_expected_prev[2];
	end
	if (
		( Mem_expected_prev[3] !== 1'bx ) && ( Mem_prev[3] !== Mem_expected_prev[3] )
		&& ((Mem_expected_prev[3] !== last_Mem_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[3] = Mem_expected_prev[3];
	end
	if (
		( Mem_expected_prev[4] !== 1'bx ) && ( Mem_prev[4] !== Mem_expected_prev[4] )
		&& ((Mem_expected_prev[4] !== last_Mem_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[4] = Mem_expected_prev[4];
	end
	if (
		( Mem_expected_prev[5] !== 1'bx ) && ( Mem_prev[5] !== Mem_expected_prev[5] )
		&& ((Mem_expected_prev[5] !== last_Mem_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[5] = Mem_expected_prev[5];
	end
	if (
		( Mem_expected_prev[6] !== 1'bx ) && ( Mem_prev[6] !== Mem_expected_prev[6] )
		&& ((Mem_expected_prev[6] !== last_Mem_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[6] = Mem_expected_prev[6];
	end
	if (
		( Mem_expected_prev[7] !== 1'bx ) && ( Mem_prev[7] !== Mem_expected_prev[7] )
		&& ((Mem_expected_prev[7] !== last_Mem_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[7] = Mem_expected_prev[7];
	end
	if (
		( Mem_expected_prev[8] !== 1'bx ) && ( Mem_prev[8] !== Mem_expected_prev[8] )
		&& ((Mem_expected_prev[8] !== last_Mem_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[8] = Mem_expected_prev[8];
	end
	if (
		( Mem_expected_prev[9] !== 1'bx ) && ( Mem_prev[9] !== Mem_expected_prev[9] )
		&& ((Mem_expected_prev[9] !== last_Mem_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[9] = Mem_expected_prev[9];
	end
	if (
		( Mem_expected_prev[10] !== 1'bx ) && ( Mem_prev[10] !== Mem_expected_prev[10] )
		&& ((Mem_expected_prev[10] !== last_Mem_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[10] = Mem_expected_prev[10];
	end
	if (
		( Mem_expected_prev[11] !== 1'bx ) && ( Mem_prev[11] !== Mem_expected_prev[11] )
		&& ((Mem_expected_prev[11] !== last_Mem_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[11] = Mem_expected_prev[11];
	end
	if (
		( Mem_expected_prev[12] !== 1'bx ) && ( Mem_prev[12] !== Mem_expected_prev[12] )
		&& ((Mem_expected_prev[12] !== last_Mem_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[12] = Mem_expected_prev[12];
	end
	if (
		( Mem_expected_prev[13] !== 1'bx ) && ( Mem_prev[13] !== Mem_expected_prev[13] )
		&& ((Mem_expected_prev[13] !== last_Mem_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[13] = Mem_expected_prev[13];
	end
	if (
		( Mem_expected_prev[14] !== 1'bx ) && ( Mem_prev[14] !== Mem_expected_prev[14] )
		&& ((Mem_expected_prev[14] !== last_Mem_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[14] = Mem_expected_prev[14];
	end
	if (
		( Mem_expected_prev[15] !== 1'bx ) && ( Mem_prev[15] !== Mem_expected_prev[15] )
		&& ((Mem_expected_prev[15] !== last_Mem_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_expected_prev);
		$display ("     Real value = %b", Mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mem_exp[15] = Mem_expected_prev[15];
	end
	if (
		( MemRead_expected_prev !== 1'bx ) && ( MemRead_prev !== MemRead_expected_prev )
		&& ((MemRead_expected_prev !== last_MemRead_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_expected_prev);
		$display ("     Real value = %b", MemRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MemRead_exp = MemRead_expected_prev;
	end
	if (
		( MemtoReg_expected_prev !== 1'bx ) && ( MemtoReg_prev !== MemtoReg_expected_prev )
		&& ((MemtoReg_expected_prev !== last_MemtoReg_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_expected_prev);
		$display ("     Real value = %b", MemtoReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemtoReg_exp = MemtoReg_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PCSource_expected_prev[0] !== 1'bx ) && ( PCSource_prev[0] !== PCSource_expected_prev[0] )
		&& ((PCSource_expected_prev[0] !== last_PCSource_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSource[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSource_expected_prev);
		$display ("     Real value = %b", PCSource_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PCSource_exp[0] = PCSource_expected_prev[0];
	end
	if (
		( PCSource_expected_prev[1] !== 1'bx ) && ( PCSource_prev[1] !== PCSource_expected_prev[1] )
		&& ((PCSource_expected_prev[1] !== last_PCSource_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSource[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSource_expected_prev);
		$display ("     Real value = %b", PCSource_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PCSource_exp[1] = PCSource_expected_prev[1];
	end
	if (
		( PCWrite_expected_prev !== 1'bx ) && ( PCWrite_prev !== PCWrite_expected_prev )
		&& ((PCWrite_expected_prev !== last_PCWrite_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCWrite_expected_prev);
		$display ("     Real value = %b", PCWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PCWrite_exp = PCWrite_expected_prev;
	end
	if (
		( Reg1_expected_prev[0] !== 1'bx ) && ( Reg1_prev[0] !== Reg1_expected_prev[0] )
		&& ((Reg1_expected_prev[0] !== last_Reg1_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[0] = Reg1_expected_prev[0];
	end
	if (
		( Reg1_expected_prev[1] !== 1'bx ) && ( Reg1_prev[1] !== Reg1_expected_prev[1] )
		&& ((Reg1_expected_prev[1] !== last_Reg1_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[1] = Reg1_expected_prev[1];
	end
	if (
		( Reg1_expected_prev[2] !== 1'bx ) && ( Reg1_prev[2] !== Reg1_expected_prev[2] )
		&& ((Reg1_expected_prev[2] !== last_Reg1_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[2] = Reg1_expected_prev[2];
	end
	if (
		( Reg1_expected_prev[3] !== 1'bx ) && ( Reg1_prev[3] !== Reg1_expected_prev[3] )
		&& ((Reg1_expected_prev[3] !== last_Reg1_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[3] = Reg1_expected_prev[3];
	end
	if (
		( Reg1_expected_prev[4] !== 1'bx ) && ( Reg1_prev[4] !== Reg1_expected_prev[4] )
		&& ((Reg1_expected_prev[4] !== last_Reg1_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[4] = Reg1_expected_prev[4];
	end
	if (
		( Reg1_expected_prev[5] !== 1'bx ) && ( Reg1_prev[5] !== Reg1_expected_prev[5] )
		&& ((Reg1_expected_prev[5] !== last_Reg1_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[5] = Reg1_expected_prev[5];
	end
	if (
		( Reg1_expected_prev[6] !== 1'bx ) && ( Reg1_prev[6] !== Reg1_expected_prev[6] )
		&& ((Reg1_expected_prev[6] !== last_Reg1_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[6] = Reg1_expected_prev[6];
	end
	if (
		( Reg1_expected_prev[7] !== 1'bx ) && ( Reg1_prev[7] !== Reg1_expected_prev[7] )
		&& ((Reg1_expected_prev[7] !== last_Reg1_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Reg1_exp[7] = Reg1_expected_prev[7];
	end
	if (
		( Reg2_expected_prev[0] !== 1'bx ) && ( Reg2_prev[0] !== Reg2_expected_prev[0] )
		&& ((Reg2_expected_prev[0] !== last_Reg2_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[0] = Reg2_expected_prev[0];
	end
	if (
		( Reg2_expected_prev[1] !== 1'bx ) && ( Reg2_prev[1] !== Reg2_expected_prev[1] )
		&& ((Reg2_expected_prev[1] !== last_Reg2_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[1] = Reg2_expected_prev[1];
	end
	if (
		( Reg2_expected_prev[2] !== 1'bx ) && ( Reg2_prev[2] !== Reg2_expected_prev[2] )
		&& ((Reg2_expected_prev[2] !== last_Reg2_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[2] = Reg2_expected_prev[2];
	end
	if (
		( Reg2_expected_prev[3] !== 1'bx ) && ( Reg2_prev[3] !== Reg2_expected_prev[3] )
		&& ((Reg2_expected_prev[3] !== last_Reg2_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[3] = Reg2_expected_prev[3];
	end
	if (
		( Reg2_expected_prev[4] !== 1'bx ) && ( Reg2_prev[4] !== Reg2_expected_prev[4] )
		&& ((Reg2_expected_prev[4] !== last_Reg2_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[4] = Reg2_expected_prev[4];
	end
	if (
		( Reg2_expected_prev[5] !== 1'bx ) && ( Reg2_prev[5] !== Reg2_expected_prev[5] )
		&& ((Reg2_expected_prev[5] !== last_Reg2_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[5] = Reg2_expected_prev[5];
	end
	if (
		( Reg2_expected_prev[6] !== 1'bx ) && ( Reg2_prev[6] !== Reg2_expected_prev[6] )
		&& ((Reg2_expected_prev[6] !== last_Reg2_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[6] = Reg2_expected_prev[6];
	end
	if (
		( Reg2_expected_prev[7] !== 1'bx ) && ( Reg2_prev[7] !== Reg2_expected_prev[7] )
		&& ((Reg2_expected_prev[7] !== last_Reg2_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg2_exp[7] = Reg2_expected_prev[7];
	end
	if (
		( RegDst_expected_prev[0] !== 1'bx ) && ( RegDst_prev[0] !== RegDst_expected_prev[0] )
		&& ((RegDst_expected_prev[0] !== last_RegDst_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_RegDst_exp[0] = RegDst_expected_prev[0];
	end
	if (
		( RegDst_expected_prev[1] !== 1'bx ) && ( RegDst_prev[1] !== RegDst_expected_prev[1] )
		&& ((RegDst_expected_prev[1] !== last_RegDst_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_RegDst_exp[1] = RegDst_expected_prev[1];
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( ZERO_expected_prev !== 1'bx ) && ( ZERO_prev !== ZERO_expected_prev )
		&& ((ZERO_expected_prev !== last_ZERO_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_expected_prev);
		$display ("     Real value = %b", ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_ZERO_exp = ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_CPU_MULTI_CYCLE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
// wires                                               
wire [7:0] A;
wire [7:0] ALU_OUT;
wire [3:0] ALUOp;
wire ALUSrcA;
wire [1:0] ALUSrcB;
wire [7:0] B;
wire [15:0] Instruction;
wire IorD;
wire IRWrite;
wire [15:0] Mem;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire [7:0] PC;
wire [1:0] PCSource;
wire PCWrite;
wire [7:0] Reg1;
wire [7:0] Reg2;
wire [1:0] RegDst;
wire RegWrite;
wire [7:0] WriteData;
wire ZERO;

wire sampler;                             

// assign statements (if any)                          
MIPS_CPU_MULTI_CYCLE i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU_OUT(ALU_OUT),
	.ALUOp(ALUOp),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.B(B),
	.CLOCK(CLOCK),
	.Instruction(Instruction),
	.IorD(IorD),
	.IRWrite(IRWrite),
	.Mem(Mem),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.PC(PC),
	.PCSource(PCSource),
	.PCWrite(PCWrite),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.WriteData(WriteData),
	.ZERO(ZERO)
);

// CLOCK
initial
begin
	repeat(333)
	begin
		CLOCK = 1'b0;
		CLOCK = #15000 1'b1;
		# 15000;
	end
	CLOCK = 1'b0;
end 

MIPS_CPU_MULTI_CYCLE_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.sampler_tx(sampler)
);

MIPS_CPU_MULTI_CYCLE_vlg_check_tst tb_out(
	.A(A),
	.ALU_OUT(ALU_OUT),
	.ALUOp(ALUOp),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.B(B),
	.Instruction(Instruction),
	.IorD(IorD),
	.IRWrite(IRWrite),
	.Mem(Mem),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.PC(PC),
	.PCSource(PCSource),
	.PCWrite(PCWrite),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.WriteData(WriteData),
	.ZERO(ZERO),
	.sampler_rx(sampler)
);
endmodule

