// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2024 01:37:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FIFO_Branch_Predictor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FIFO_Branch_Predictor_vlg_sample_tst(
	Address,
	CLOCK,
	ISBRANCH,
	Predict,
	sampler_tx
);
input [7:0] Address;
input  CLOCK;
input  ISBRANCH;
input  Predict;
output sampler_tx;

reg sample;
time current_time;
always @(Address or CLOCK or ISBRANCH or Predict)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FIFO_Branch_Predictor_vlg_check_tst (
	Block_four,
	Block_one,
	Block_three,
	Block_two,
	HIT,
	TAKEN,
	sampler_rx
);
input [15:0] Block_four;
input [15:0] Block_one;
input [15:0] Block_three;
input [15:0] Block_two;
input  HIT;
input  TAKEN;
input sampler_rx;

reg [15:0] Block_four_expected;
reg [15:0] Block_one_expected;
reg [15:0] Block_three_expected;
reg [15:0] Block_two_expected;
reg  HIT_expected;
reg  TAKEN_expected;

reg [15:0] Block_four_prev;
reg [15:0] Block_one_prev;
reg [15:0] Block_three_prev;
reg [15:0] Block_two_prev;
reg  HIT_prev;
reg  TAKEN_prev;

reg [15:0] Block_four_expected_prev;
reg [15:0] Block_one_expected_prev;
reg [15:0] Block_three_expected_prev;
reg [15:0] Block_two_expected_prev;
reg  HIT_expected_prev;
reg  TAKEN_expected_prev;

reg [15:0] last_Block_four_exp;
reg [15:0] last_Block_one_exp;
reg [15:0] last_Block_three_exp;
reg [15:0] last_Block_two_exp;
reg  last_HIT_exp;
reg  last_TAKEN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Block_four_prev = Block_four;
	Block_one_prev = Block_one;
	Block_three_prev = Block_three;
	Block_two_prev = Block_two;
	HIT_prev = HIT;
	TAKEN_prev = TAKEN;
end

// update expected /o prevs

always @(trigger)
begin
	Block_four_expected_prev = Block_four_expected;
	Block_one_expected_prev = Block_one_expected;
	Block_three_expected_prev = Block_three_expected;
	Block_two_expected_prev = Block_two_expected;
	HIT_expected_prev = HIT_expected;
	TAKEN_expected_prev = TAKEN_expected;
end



// expected HIT
initial
begin
	HIT_expected = 1'bX;
end 

// expected TAKEN
initial
begin
	TAKEN_expected = 1'bX;
end 
// expected Block_one[ 15 ]
initial
begin
	Block_one_expected[15] = 1'bX;
end 
// expected Block_one[ 14 ]
initial
begin
	Block_one_expected[14] = 1'bX;
end 
// expected Block_one[ 13 ]
initial
begin
	Block_one_expected[13] = 1'bX;
end 
// expected Block_one[ 12 ]
initial
begin
	Block_one_expected[12] = 1'bX;
end 
// expected Block_one[ 11 ]
initial
begin
	Block_one_expected[11] = 1'bX;
end 
// expected Block_one[ 10 ]
initial
begin
	Block_one_expected[10] = 1'bX;
end 
// expected Block_one[ 9 ]
initial
begin
	Block_one_expected[9] = 1'bX;
end 
// expected Block_one[ 8 ]
initial
begin
	Block_one_expected[8] = 1'bX;
end 
// expected Block_one[ 7 ]
initial
begin
	Block_one_expected[7] = 1'bX;
end 
// expected Block_one[ 6 ]
initial
begin
	Block_one_expected[6] = 1'bX;
end 
// expected Block_one[ 5 ]
initial
begin
	Block_one_expected[5] = 1'bX;
end 
// expected Block_one[ 4 ]
initial
begin
	Block_one_expected[4] = 1'bX;
end 
// expected Block_one[ 3 ]
initial
begin
	Block_one_expected[3] = 1'bX;
end 
// expected Block_one[ 2 ]
initial
begin
	Block_one_expected[2] = 1'bX;
end 
// expected Block_one[ 1 ]
initial
begin
	Block_one_expected[1] = 1'bX;
end 
// expected Block_one[ 0 ]
initial
begin
	Block_one_expected[0] = 1'bX;
end 
// expected Block_two[ 15 ]
initial
begin
	Block_two_expected[15] = 1'bX;
end 
// expected Block_two[ 14 ]
initial
begin
	Block_two_expected[14] = 1'bX;
end 
// expected Block_two[ 13 ]
initial
begin
	Block_two_expected[13] = 1'bX;
end 
// expected Block_two[ 12 ]
initial
begin
	Block_two_expected[12] = 1'bX;
end 
// expected Block_two[ 11 ]
initial
begin
	Block_two_expected[11] = 1'bX;
end 
// expected Block_two[ 10 ]
initial
begin
	Block_two_expected[10] = 1'bX;
end 
// expected Block_two[ 9 ]
initial
begin
	Block_two_expected[9] = 1'bX;
end 
// expected Block_two[ 8 ]
initial
begin
	Block_two_expected[8] = 1'bX;
end 
// expected Block_two[ 7 ]
initial
begin
	Block_two_expected[7] = 1'bX;
end 
// expected Block_two[ 6 ]
initial
begin
	Block_two_expected[6] = 1'bX;
end 
// expected Block_two[ 5 ]
initial
begin
	Block_two_expected[5] = 1'bX;
end 
// expected Block_two[ 4 ]
initial
begin
	Block_two_expected[4] = 1'bX;
end 
// expected Block_two[ 3 ]
initial
begin
	Block_two_expected[3] = 1'bX;
end 
// expected Block_two[ 2 ]
initial
begin
	Block_two_expected[2] = 1'bX;
end 
// expected Block_two[ 1 ]
initial
begin
	Block_two_expected[1] = 1'bX;
end 
// expected Block_two[ 0 ]
initial
begin
	Block_two_expected[0] = 1'bX;
end 
// expected Block_three[ 15 ]
initial
begin
	Block_three_expected[15] = 1'bX;
end 
// expected Block_three[ 14 ]
initial
begin
	Block_three_expected[14] = 1'bX;
end 
// expected Block_three[ 13 ]
initial
begin
	Block_three_expected[13] = 1'bX;
end 
// expected Block_three[ 12 ]
initial
begin
	Block_three_expected[12] = 1'bX;
end 
// expected Block_three[ 11 ]
initial
begin
	Block_three_expected[11] = 1'bX;
end 
// expected Block_three[ 10 ]
initial
begin
	Block_three_expected[10] = 1'bX;
end 
// expected Block_three[ 9 ]
initial
begin
	Block_three_expected[9] = 1'bX;
end 
// expected Block_three[ 8 ]
initial
begin
	Block_three_expected[8] = 1'bX;
end 
// expected Block_three[ 7 ]
initial
begin
	Block_three_expected[7] = 1'bX;
end 
// expected Block_three[ 6 ]
initial
begin
	Block_three_expected[6] = 1'bX;
end 
// expected Block_three[ 5 ]
initial
begin
	Block_three_expected[5] = 1'bX;
end 
// expected Block_three[ 4 ]
initial
begin
	Block_three_expected[4] = 1'bX;
end 
// expected Block_three[ 3 ]
initial
begin
	Block_three_expected[3] = 1'bX;
end 
// expected Block_three[ 2 ]
initial
begin
	Block_three_expected[2] = 1'bX;
end 
// expected Block_three[ 1 ]
initial
begin
	Block_three_expected[1] = 1'bX;
end 
// expected Block_three[ 0 ]
initial
begin
	Block_three_expected[0] = 1'bX;
end 
// expected Block_four[ 15 ]
initial
begin
	Block_four_expected[15] = 1'bX;
end 
// expected Block_four[ 14 ]
initial
begin
	Block_four_expected[14] = 1'bX;
end 
// expected Block_four[ 13 ]
initial
begin
	Block_four_expected[13] = 1'bX;
end 
// expected Block_four[ 12 ]
initial
begin
	Block_four_expected[12] = 1'bX;
end 
// expected Block_four[ 11 ]
initial
begin
	Block_four_expected[11] = 1'bX;
end 
// expected Block_four[ 10 ]
initial
begin
	Block_four_expected[10] = 1'bX;
end 
// expected Block_four[ 9 ]
initial
begin
	Block_four_expected[9] = 1'bX;
end 
// expected Block_four[ 8 ]
initial
begin
	Block_four_expected[8] = 1'bX;
end 
// expected Block_four[ 7 ]
initial
begin
	Block_four_expected[7] = 1'bX;
end 
// expected Block_four[ 6 ]
initial
begin
	Block_four_expected[6] = 1'bX;
end 
// expected Block_four[ 5 ]
initial
begin
	Block_four_expected[5] = 1'bX;
end 
// expected Block_four[ 4 ]
initial
begin
	Block_four_expected[4] = 1'bX;
end 
// expected Block_four[ 3 ]
initial
begin
	Block_four_expected[3] = 1'bX;
end 
// expected Block_four[ 2 ]
initial
begin
	Block_four_expected[2] = 1'bX;
end 
// expected Block_four[ 1 ]
initial
begin
	Block_four_expected[1] = 1'bX;
end 
// expected Block_four[ 0 ]
initial
begin
	Block_four_expected[0] = 1'bX;
end 
// generate trigger
always @(Block_four_expected or Block_four or Block_one_expected or Block_one or Block_three_expected or Block_three or Block_two_expected or Block_two or HIT_expected or HIT or TAKEN_expected or TAKEN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Block_four = %b | expected Block_one = %b | expected Block_three = %b | expected Block_two = %b | expected HIT = %b | expected TAKEN = %b | ",Block_four_expected_prev,Block_one_expected_prev,Block_three_expected_prev,Block_two_expected_prev,HIT_expected_prev,TAKEN_expected_prev);
	$display("| real Block_four = %b | real Block_one = %b | real Block_three = %b | real Block_two = %b | real HIT = %b | real TAKEN = %b | ",Block_four_prev,Block_one_prev,Block_three_prev,Block_two_prev,HIT_prev,TAKEN_prev);
`endif
	if (
		( Block_four_expected_prev[0] !== 1'bx ) && ( Block_four_prev[0] !== Block_four_expected_prev[0] )
		&& ((Block_four_expected_prev[0] !== last_Block_four_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[0] = Block_four_expected_prev[0];
	end
	if (
		( Block_four_expected_prev[1] !== 1'bx ) && ( Block_four_prev[1] !== Block_four_expected_prev[1] )
		&& ((Block_four_expected_prev[1] !== last_Block_four_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[1] = Block_four_expected_prev[1];
	end
	if (
		( Block_four_expected_prev[2] !== 1'bx ) && ( Block_four_prev[2] !== Block_four_expected_prev[2] )
		&& ((Block_four_expected_prev[2] !== last_Block_four_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[2] = Block_four_expected_prev[2];
	end
	if (
		( Block_four_expected_prev[3] !== 1'bx ) && ( Block_four_prev[3] !== Block_four_expected_prev[3] )
		&& ((Block_four_expected_prev[3] !== last_Block_four_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[3] = Block_four_expected_prev[3];
	end
	if (
		( Block_four_expected_prev[4] !== 1'bx ) && ( Block_four_prev[4] !== Block_four_expected_prev[4] )
		&& ((Block_four_expected_prev[4] !== last_Block_four_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[4] = Block_four_expected_prev[4];
	end
	if (
		( Block_four_expected_prev[5] !== 1'bx ) && ( Block_four_prev[5] !== Block_four_expected_prev[5] )
		&& ((Block_four_expected_prev[5] !== last_Block_four_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[5] = Block_four_expected_prev[5];
	end
	if (
		( Block_four_expected_prev[6] !== 1'bx ) && ( Block_four_prev[6] !== Block_four_expected_prev[6] )
		&& ((Block_four_expected_prev[6] !== last_Block_four_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[6] = Block_four_expected_prev[6];
	end
	if (
		( Block_four_expected_prev[7] !== 1'bx ) && ( Block_four_prev[7] !== Block_four_expected_prev[7] )
		&& ((Block_four_expected_prev[7] !== last_Block_four_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[7] = Block_four_expected_prev[7];
	end
	if (
		( Block_four_expected_prev[8] !== 1'bx ) && ( Block_four_prev[8] !== Block_four_expected_prev[8] )
		&& ((Block_four_expected_prev[8] !== last_Block_four_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[8] = Block_four_expected_prev[8];
	end
	if (
		( Block_four_expected_prev[9] !== 1'bx ) && ( Block_four_prev[9] !== Block_four_expected_prev[9] )
		&& ((Block_four_expected_prev[9] !== last_Block_four_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[9] = Block_four_expected_prev[9];
	end
	if (
		( Block_four_expected_prev[10] !== 1'bx ) && ( Block_four_prev[10] !== Block_four_expected_prev[10] )
		&& ((Block_four_expected_prev[10] !== last_Block_four_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[10] = Block_four_expected_prev[10];
	end
	if (
		( Block_four_expected_prev[11] !== 1'bx ) && ( Block_four_prev[11] !== Block_four_expected_prev[11] )
		&& ((Block_four_expected_prev[11] !== last_Block_four_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[11] = Block_four_expected_prev[11];
	end
	if (
		( Block_four_expected_prev[12] !== 1'bx ) && ( Block_four_prev[12] !== Block_four_expected_prev[12] )
		&& ((Block_four_expected_prev[12] !== last_Block_four_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[12] = Block_four_expected_prev[12];
	end
	if (
		( Block_four_expected_prev[13] !== 1'bx ) && ( Block_four_prev[13] !== Block_four_expected_prev[13] )
		&& ((Block_four_expected_prev[13] !== last_Block_four_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[13] = Block_four_expected_prev[13];
	end
	if (
		( Block_four_expected_prev[14] !== 1'bx ) && ( Block_four_prev[14] !== Block_four_expected_prev[14] )
		&& ((Block_four_expected_prev[14] !== last_Block_four_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[14] = Block_four_expected_prev[14];
	end
	if (
		( Block_four_expected_prev[15] !== 1'bx ) && ( Block_four_prev[15] !== Block_four_expected_prev[15] )
		&& ((Block_four_expected_prev[15] !== last_Block_four_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_four[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_four_expected_prev);
		$display ("     Real value = %b", Block_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Block_four_exp[15] = Block_four_expected_prev[15];
	end
	if (
		( Block_one_expected_prev[0] !== 1'bx ) && ( Block_one_prev[0] !== Block_one_expected_prev[0] )
		&& ((Block_one_expected_prev[0] !== last_Block_one_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[0] = Block_one_expected_prev[0];
	end
	if (
		( Block_one_expected_prev[1] !== 1'bx ) && ( Block_one_prev[1] !== Block_one_expected_prev[1] )
		&& ((Block_one_expected_prev[1] !== last_Block_one_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[1] = Block_one_expected_prev[1];
	end
	if (
		( Block_one_expected_prev[2] !== 1'bx ) && ( Block_one_prev[2] !== Block_one_expected_prev[2] )
		&& ((Block_one_expected_prev[2] !== last_Block_one_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[2] = Block_one_expected_prev[2];
	end
	if (
		( Block_one_expected_prev[3] !== 1'bx ) && ( Block_one_prev[3] !== Block_one_expected_prev[3] )
		&& ((Block_one_expected_prev[3] !== last_Block_one_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[3] = Block_one_expected_prev[3];
	end
	if (
		( Block_one_expected_prev[4] !== 1'bx ) && ( Block_one_prev[4] !== Block_one_expected_prev[4] )
		&& ((Block_one_expected_prev[4] !== last_Block_one_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[4] = Block_one_expected_prev[4];
	end
	if (
		( Block_one_expected_prev[5] !== 1'bx ) && ( Block_one_prev[5] !== Block_one_expected_prev[5] )
		&& ((Block_one_expected_prev[5] !== last_Block_one_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[5] = Block_one_expected_prev[5];
	end
	if (
		( Block_one_expected_prev[6] !== 1'bx ) && ( Block_one_prev[6] !== Block_one_expected_prev[6] )
		&& ((Block_one_expected_prev[6] !== last_Block_one_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[6] = Block_one_expected_prev[6];
	end
	if (
		( Block_one_expected_prev[7] !== 1'bx ) && ( Block_one_prev[7] !== Block_one_expected_prev[7] )
		&& ((Block_one_expected_prev[7] !== last_Block_one_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[7] = Block_one_expected_prev[7];
	end
	if (
		( Block_one_expected_prev[8] !== 1'bx ) && ( Block_one_prev[8] !== Block_one_expected_prev[8] )
		&& ((Block_one_expected_prev[8] !== last_Block_one_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[8] = Block_one_expected_prev[8];
	end
	if (
		( Block_one_expected_prev[9] !== 1'bx ) && ( Block_one_prev[9] !== Block_one_expected_prev[9] )
		&& ((Block_one_expected_prev[9] !== last_Block_one_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[9] = Block_one_expected_prev[9];
	end
	if (
		( Block_one_expected_prev[10] !== 1'bx ) && ( Block_one_prev[10] !== Block_one_expected_prev[10] )
		&& ((Block_one_expected_prev[10] !== last_Block_one_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[10] = Block_one_expected_prev[10];
	end
	if (
		( Block_one_expected_prev[11] !== 1'bx ) && ( Block_one_prev[11] !== Block_one_expected_prev[11] )
		&& ((Block_one_expected_prev[11] !== last_Block_one_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[11] = Block_one_expected_prev[11];
	end
	if (
		( Block_one_expected_prev[12] !== 1'bx ) && ( Block_one_prev[12] !== Block_one_expected_prev[12] )
		&& ((Block_one_expected_prev[12] !== last_Block_one_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[12] = Block_one_expected_prev[12];
	end
	if (
		( Block_one_expected_prev[13] !== 1'bx ) && ( Block_one_prev[13] !== Block_one_expected_prev[13] )
		&& ((Block_one_expected_prev[13] !== last_Block_one_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[13] = Block_one_expected_prev[13];
	end
	if (
		( Block_one_expected_prev[14] !== 1'bx ) && ( Block_one_prev[14] !== Block_one_expected_prev[14] )
		&& ((Block_one_expected_prev[14] !== last_Block_one_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[14] = Block_one_expected_prev[14];
	end
	if (
		( Block_one_expected_prev[15] !== 1'bx ) && ( Block_one_prev[15] !== Block_one_expected_prev[15] )
		&& ((Block_one_expected_prev[15] !== last_Block_one_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_one[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_one_expected_prev);
		$display ("     Real value = %b", Block_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Block_one_exp[15] = Block_one_expected_prev[15];
	end
	if (
		( Block_three_expected_prev[0] !== 1'bx ) && ( Block_three_prev[0] !== Block_three_expected_prev[0] )
		&& ((Block_three_expected_prev[0] !== last_Block_three_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[0] = Block_three_expected_prev[0];
	end
	if (
		( Block_three_expected_prev[1] !== 1'bx ) && ( Block_three_prev[1] !== Block_three_expected_prev[1] )
		&& ((Block_three_expected_prev[1] !== last_Block_three_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[1] = Block_three_expected_prev[1];
	end
	if (
		( Block_three_expected_prev[2] !== 1'bx ) && ( Block_three_prev[2] !== Block_three_expected_prev[2] )
		&& ((Block_three_expected_prev[2] !== last_Block_three_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[2] = Block_three_expected_prev[2];
	end
	if (
		( Block_three_expected_prev[3] !== 1'bx ) && ( Block_three_prev[3] !== Block_three_expected_prev[3] )
		&& ((Block_three_expected_prev[3] !== last_Block_three_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[3] = Block_three_expected_prev[3];
	end
	if (
		( Block_three_expected_prev[4] !== 1'bx ) && ( Block_three_prev[4] !== Block_three_expected_prev[4] )
		&& ((Block_three_expected_prev[4] !== last_Block_three_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[4] = Block_three_expected_prev[4];
	end
	if (
		( Block_three_expected_prev[5] !== 1'bx ) && ( Block_three_prev[5] !== Block_three_expected_prev[5] )
		&& ((Block_three_expected_prev[5] !== last_Block_three_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[5] = Block_three_expected_prev[5];
	end
	if (
		( Block_three_expected_prev[6] !== 1'bx ) && ( Block_three_prev[6] !== Block_three_expected_prev[6] )
		&& ((Block_three_expected_prev[6] !== last_Block_three_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[6] = Block_three_expected_prev[6];
	end
	if (
		( Block_three_expected_prev[7] !== 1'bx ) && ( Block_three_prev[7] !== Block_three_expected_prev[7] )
		&& ((Block_three_expected_prev[7] !== last_Block_three_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[7] = Block_three_expected_prev[7];
	end
	if (
		( Block_three_expected_prev[8] !== 1'bx ) && ( Block_three_prev[8] !== Block_three_expected_prev[8] )
		&& ((Block_three_expected_prev[8] !== last_Block_three_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[8] = Block_three_expected_prev[8];
	end
	if (
		( Block_three_expected_prev[9] !== 1'bx ) && ( Block_three_prev[9] !== Block_three_expected_prev[9] )
		&& ((Block_three_expected_prev[9] !== last_Block_three_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[9] = Block_three_expected_prev[9];
	end
	if (
		( Block_three_expected_prev[10] !== 1'bx ) && ( Block_three_prev[10] !== Block_three_expected_prev[10] )
		&& ((Block_three_expected_prev[10] !== last_Block_three_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[10] = Block_three_expected_prev[10];
	end
	if (
		( Block_three_expected_prev[11] !== 1'bx ) && ( Block_three_prev[11] !== Block_three_expected_prev[11] )
		&& ((Block_three_expected_prev[11] !== last_Block_three_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[11] = Block_three_expected_prev[11];
	end
	if (
		( Block_three_expected_prev[12] !== 1'bx ) && ( Block_three_prev[12] !== Block_three_expected_prev[12] )
		&& ((Block_three_expected_prev[12] !== last_Block_three_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[12] = Block_three_expected_prev[12];
	end
	if (
		( Block_three_expected_prev[13] !== 1'bx ) && ( Block_three_prev[13] !== Block_three_expected_prev[13] )
		&& ((Block_three_expected_prev[13] !== last_Block_three_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[13] = Block_three_expected_prev[13];
	end
	if (
		( Block_three_expected_prev[14] !== 1'bx ) && ( Block_three_prev[14] !== Block_three_expected_prev[14] )
		&& ((Block_three_expected_prev[14] !== last_Block_three_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[14] = Block_three_expected_prev[14];
	end
	if (
		( Block_three_expected_prev[15] !== 1'bx ) && ( Block_three_prev[15] !== Block_three_expected_prev[15] )
		&& ((Block_three_expected_prev[15] !== last_Block_three_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_three[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_three_expected_prev);
		$display ("     Real value = %b", Block_three_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Block_three_exp[15] = Block_three_expected_prev[15];
	end
	if (
		( Block_two_expected_prev[0] !== 1'bx ) && ( Block_two_prev[0] !== Block_two_expected_prev[0] )
		&& ((Block_two_expected_prev[0] !== last_Block_two_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[0] = Block_two_expected_prev[0];
	end
	if (
		( Block_two_expected_prev[1] !== 1'bx ) && ( Block_two_prev[1] !== Block_two_expected_prev[1] )
		&& ((Block_two_expected_prev[1] !== last_Block_two_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[1] = Block_two_expected_prev[1];
	end
	if (
		( Block_two_expected_prev[2] !== 1'bx ) && ( Block_two_prev[2] !== Block_two_expected_prev[2] )
		&& ((Block_two_expected_prev[2] !== last_Block_two_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[2] = Block_two_expected_prev[2];
	end
	if (
		( Block_two_expected_prev[3] !== 1'bx ) && ( Block_two_prev[3] !== Block_two_expected_prev[3] )
		&& ((Block_two_expected_prev[3] !== last_Block_two_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[3] = Block_two_expected_prev[3];
	end
	if (
		( Block_two_expected_prev[4] !== 1'bx ) && ( Block_two_prev[4] !== Block_two_expected_prev[4] )
		&& ((Block_two_expected_prev[4] !== last_Block_two_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[4] = Block_two_expected_prev[4];
	end
	if (
		( Block_two_expected_prev[5] !== 1'bx ) && ( Block_two_prev[5] !== Block_two_expected_prev[5] )
		&& ((Block_two_expected_prev[5] !== last_Block_two_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[5] = Block_two_expected_prev[5];
	end
	if (
		( Block_two_expected_prev[6] !== 1'bx ) && ( Block_two_prev[6] !== Block_two_expected_prev[6] )
		&& ((Block_two_expected_prev[6] !== last_Block_two_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[6] = Block_two_expected_prev[6];
	end
	if (
		( Block_two_expected_prev[7] !== 1'bx ) && ( Block_two_prev[7] !== Block_two_expected_prev[7] )
		&& ((Block_two_expected_prev[7] !== last_Block_two_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[7] = Block_two_expected_prev[7];
	end
	if (
		( Block_two_expected_prev[8] !== 1'bx ) && ( Block_two_prev[8] !== Block_two_expected_prev[8] )
		&& ((Block_two_expected_prev[8] !== last_Block_two_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[8] = Block_two_expected_prev[8];
	end
	if (
		( Block_two_expected_prev[9] !== 1'bx ) && ( Block_two_prev[9] !== Block_two_expected_prev[9] )
		&& ((Block_two_expected_prev[9] !== last_Block_two_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[9] = Block_two_expected_prev[9];
	end
	if (
		( Block_two_expected_prev[10] !== 1'bx ) && ( Block_two_prev[10] !== Block_two_expected_prev[10] )
		&& ((Block_two_expected_prev[10] !== last_Block_two_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[10] = Block_two_expected_prev[10];
	end
	if (
		( Block_two_expected_prev[11] !== 1'bx ) && ( Block_two_prev[11] !== Block_two_expected_prev[11] )
		&& ((Block_two_expected_prev[11] !== last_Block_two_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[11] = Block_two_expected_prev[11];
	end
	if (
		( Block_two_expected_prev[12] !== 1'bx ) && ( Block_two_prev[12] !== Block_two_expected_prev[12] )
		&& ((Block_two_expected_prev[12] !== last_Block_two_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[12] = Block_two_expected_prev[12];
	end
	if (
		( Block_two_expected_prev[13] !== 1'bx ) && ( Block_two_prev[13] !== Block_two_expected_prev[13] )
		&& ((Block_two_expected_prev[13] !== last_Block_two_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[13] = Block_two_expected_prev[13];
	end
	if (
		( Block_two_expected_prev[14] !== 1'bx ) && ( Block_two_prev[14] !== Block_two_expected_prev[14] )
		&& ((Block_two_expected_prev[14] !== last_Block_two_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[14] = Block_two_expected_prev[14];
	end
	if (
		( Block_two_expected_prev[15] !== 1'bx ) && ( Block_two_prev[15] !== Block_two_expected_prev[15] )
		&& ((Block_two_expected_prev[15] !== last_Block_two_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Block_two[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Block_two_expected_prev);
		$display ("     Real value = %b", Block_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Block_two_exp[15] = Block_two_expected_prev[15];
	end
	if (
		( HIT_expected_prev !== 1'bx ) && ( HIT_prev !== HIT_expected_prev )
		&& ((HIT_expected_prev !== last_HIT_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HIT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HIT_expected_prev);
		$display ("     Real value = %b", HIT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HIT_exp = HIT_expected_prev;
	end
	if (
		( TAKEN_expected_prev !== 1'bx ) && ( TAKEN_prev !== TAKEN_expected_prev )
		&& ((TAKEN_expected_prev !== last_TAKEN_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TAKEN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TAKEN_expected_prev);
		$display ("     Real value = %b", TAKEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_TAKEN_exp = TAKEN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FIFO_Branch_Predictor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Address;
reg CLOCK;
reg ISBRANCH;
reg Predict;
// wires                                               
wire [15:0] Block_four;
wire [15:0] Block_one;
wire [15:0] Block_three;
wire [15:0] Block_two;
wire HIT;
wire TAKEN;

wire sampler;                             

// assign statements (if any)                          
FIFO_Branch_Predictor i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.Block_four(Block_four),
	.Block_one(Block_one),
	.Block_three(Block_three),
	.Block_two(Block_two),
	.CLOCK(CLOCK),
	.HIT(HIT),
	.ISBRANCH(ISBRANCH),
	.Predict(Predict),
	.TAKEN(TAKEN)
);
// Address[ 7 ]
initial
begin
	Address[7] = 1'b0;
	Address[7] = #60000 1'b1;
	Address[7] = #80000 1'b0;
	Address[7] = #340000 1'b1;
	Address[7] = #80000 1'b0;
	Address[7] = #60000 1'b1;
	Address[7] = #70000 1'b0;
	Address[7] = #190000 1'b1;
	Address[7] = #60000 1'b0;
end 
// Address[ 6 ]
initial
begin
	Address[6] = 1'b0;
	Address[6] = #60000 1'b1;
	Address[6] = #80000 1'b0;
	Address[6] = #220000 1'b1;
	Address[6] = #60000 1'b0;
	Address[6] = #60000 1'b1;
	Address[6] = #80000 1'b0;
	Address[6] = #60000 1'b1;
	Address[6] = #70000 1'b0;
	Address[6] = #190000 1'b1;
	Address[6] = #60000 1'b0;
end 
// Address[ 5 ]
initial
begin
	Address[5] = 1'b0;
	Address[5] = #60000 1'b1;
	Address[5] = #80000 1'b0;
	Address[5] = #80000 1'b1;
	Address[5] = #110000 1'b0;
	Address[5] = #150000 1'b1;
	Address[5] = #80000 1'b0;
	Address[5] = #320000 1'b1;
	Address[5] = #60000 1'b0;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b0;
	Address[4] = #60000 1'b1;
	Address[4] = #80000 1'b0;
	Address[4] = #80000 1'b1;
	Address[4] = #110000 1'b0;
	Address[4] = #30000 1'b1;
	Address[4] = #60000 1'b0;
	Address[4] = #330000 1'b1;
	Address[4] = #80000 1'b0;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b0;
	Address[3] = #60000 1'b1;
	Address[3] = #80000 1'b0;
	Address[3] = #80000 1'b1;
	Address[3] = #110000 1'b0;
	Address[3] = #150000 1'b1;
	Address[3] = #80000 1'b0;
	Address[3] = #60000 1'b1;
	Address[3] = #70000 1'b0;
	Address[3] = #60000 1'b1;
	Address[3] = #80000 1'b0;
	Address[3] = #50000 1'b1;
	Address[3] = #60000 1'b0;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #80000 1'b0;
	Address[2] = #220000 1'b1;
	Address[2] = #60000 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #80000 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #70000 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #80000 1'b0;
	Address[2] = #50000 1'b1;
	Address[2] = #60000 1'b0;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
	Address[1] = #60000 1'b1;
	Address[1] = #80000 1'b0;
	Address[1] = #340000 1'b1;
	Address[1] = #80000 1'b0;
	Address[1] = #60000 1'b1;
	Address[1] = #70000 1'b0;
	Address[1] = #60000 1'b1;
	Address[1] = #80000 1'b0;
	Address[1] = #50000 1'b1;
	Address[1] = #60000 1'b0;
end 
// Address[ 0 ]
initial
begin
	Address[0] = 1'b0;
	Address[0] = #60000 1'b1;
	Address[0] = #80000 1'b0;
	Address[0] = #220000 1'b1;
	Address[0] = #60000 1'b0;
	Address[0] = #60000 1'b1;
	Address[0] = #80000 1'b0;
	Address[0] = #60000 1'b1;
	Address[0] = #70000 1'b0;
	Address[0] = #60000 1'b1;
	Address[0] = #80000 1'b0;
	Address[0] = #50000 1'b1;
	Address[0] = #60000 1'b0;
end 

// ISBRANCH
initial
begin
	ISBRANCH = 1'b0;
	ISBRANCH = #70000 1'b1;
	ISBRANCH = #50000 1'b0;
	ISBRANCH = #110000 1'b1;
	ISBRANCH = #30000 1'b0;
	ISBRANCH = #120000 1'b1;
	ISBRANCH = #30000 1'b0;
	ISBRANCH = #90000 1'b1;
	ISBRANCH = #30000 1'b0;
	ISBRANCH = #110000 1'b1;
	ISBRANCH = #30000 1'b0;
	ISBRANCH = #100000 1'b1;
	ISBRANCH = #30000 1'b0;
	ISBRANCH = #90000 1'b1;
	ISBRANCH = #30000 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

// Predict
initial
begin
	Predict = 1'b1;
	Predict = #80000 1'b0;
	Predict = #40000 1'b1;
	Predict = #380000 1'b0;
	Predict = #50000 1'b1;
end 

FIFO_Branch_Predictor_vlg_sample_tst tb_sample (
	.Address(Address),
	.CLOCK(CLOCK),
	.ISBRANCH(ISBRANCH),
	.Predict(Predict),
	.sampler_tx(sampler)
);

FIFO_Branch_Predictor_vlg_check_tst tb_out(
	.Block_four(Block_four),
	.Block_one(Block_one),
	.Block_three(Block_three),
	.Block_two(Block_two),
	.HIT(HIT),
	.TAKEN(TAKEN),
	.sampler_rx(sampler)
);
endmodule

