// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2024 03:53:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU_ENABLE;
reg CLOCK;
// wires                                               
wire [7:0] ALU_Result_Prim;
wire [15:0] Instruction;
wire MemtoReg;
wire MemWrite;
wire [7:0] PC_OUT;
wire [15:0] Read_Data;
wire [7:0] Reg1;
wire [7:0] Reg2;
wire [7:0] Reg2_Zegond;
wire RegDst;
wire [7:0] Write_Data;

// assign statements (if any)                          
MIPS_CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_ENABLE(ALU_ENABLE),
	.ALU_Result_Prim(ALU_Result_Prim),
	.CLOCK(CLOCK),
	.Instruction(Instruction),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.PC_OUT(PC_OUT),
	.Read_Data(Read_Data),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.Reg2_Zegond(Reg2_Zegond),
	.RegDst(RegDst),
	.Write_Data(Write_Data)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

