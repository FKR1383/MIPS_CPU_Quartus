// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2024 18:22:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_CPU_vlg_sample_tst(
	ALU_ENABLE,
	CLOCK,
	sampler_tx
);
input  ALU_ENABLE;
input  CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(ALU_ENABLE or CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_CPU_vlg_check_tst (
	ALU_result,
	Instruction,
	Operand1,
	Operand2,
	PC_OUT,
	Read_Data,
	Reg1,
	Reg2,
	Write_Data,
	Write_Register,
	sampler_rx
);
input [7:0] ALU_result;
input [15:0] Instruction;
input [7:0] Operand1;
input [7:0] Operand2;
input [7:0] PC_OUT;
input [15:0] Read_Data;
input [7:0] Reg1;
input [7:0] Reg2;
input [7:0] Write_Data;
input [2:0] Write_Register;
input sampler_rx;

reg [7:0] ALU_result_expected;
reg [15:0] Instruction_expected;
reg [7:0] Operand1_expected;
reg [7:0] Operand2_expected;
reg [7:0] PC_OUT_expected;
reg [15:0] Read_Data_expected;
reg [7:0] Reg1_expected;
reg [7:0] Reg2_expected;
reg [7:0] Write_Data_expected;
reg [2:0] Write_Register_expected;

reg [7:0] ALU_result_prev;
reg [15:0] Instruction_prev;
reg [7:0] Operand1_prev;
reg [7:0] Operand2_prev;
reg [7:0] PC_OUT_prev;
reg [15:0] Read_Data_prev;
reg [7:0] Reg1_prev;
reg [7:0] Reg2_prev;
reg [7:0] Write_Data_prev;
reg [2:0] Write_Register_prev;

reg [7:0] ALU_result_expected_prev;
reg [15:0] Instruction_expected_prev;
reg [7:0] Operand1_expected_prev;
reg [7:0] Operand2_expected_prev;
reg [7:0] PC_OUT_expected_prev;
reg [15:0] Read_Data_expected_prev;
reg [7:0] Reg1_expected_prev;
reg [7:0] Reg2_expected_prev;
reg [7:0] Write_Data_expected_prev;
reg [2:0] Write_Register_expected_prev;

reg [7:0] last_ALU_result_exp;
reg [15:0] last_Instruction_exp;
reg [7:0] last_Operand1_exp;
reg [7:0] last_Operand2_exp;
reg [7:0] last_PC_OUT_exp;
reg [15:0] last_Read_Data_exp;
reg [7:0] last_Reg1_exp;
reg [7:0] last_Reg2_exp;
reg [7:0] last_Write_Data_exp;
reg [2:0] last_Write_Register_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_result_prev = ALU_result;
	Instruction_prev = Instruction;
	Operand1_prev = Operand1;
	Operand2_prev = Operand2;
	PC_OUT_prev = PC_OUT;
	Read_Data_prev = Read_Data;
	Reg1_prev = Reg1;
	Reg2_prev = Reg2;
	Write_Data_prev = Write_Data;
	Write_Register_prev = Write_Register;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_result_expected_prev = ALU_result_expected;
	Instruction_expected_prev = Instruction_expected;
	Operand1_expected_prev = Operand1_expected;
	Operand2_expected_prev = Operand2_expected;
	PC_OUT_expected_prev = PC_OUT_expected;
	Read_Data_expected_prev = Read_Data_expected;
	Reg1_expected_prev = Reg1_expected;
	Reg2_expected_prev = Reg2_expected;
	Write_Data_expected_prev = Write_Data_expected;
	Write_Register_expected_prev = Write_Register_expected;
end


// expected PC_OUT[ 7 ]
initial
begin
	PC_OUT_expected[7] = 1'bX;
end 
// expected PC_OUT[ 6 ]
initial
begin
	PC_OUT_expected[6] = 1'bX;
end 
// expected PC_OUT[ 5 ]
initial
begin
	PC_OUT_expected[5] = 1'bX;
end 
// expected PC_OUT[ 4 ]
initial
begin
	PC_OUT_expected[4] = 1'bX;
end 
// expected PC_OUT[ 3 ]
initial
begin
	PC_OUT_expected[3] = 1'bX;
end 
// expected PC_OUT[ 2 ]
initial
begin
	PC_OUT_expected[2] = 1'bX;
end 
// expected PC_OUT[ 1 ]
initial
begin
	PC_OUT_expected[1] = 1'bX;
end 
// expected PC_OUT[ 0 ]
initial
begin
	PC_OUT_expected[0] = 1'bX;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
end 
// expected ALU_result[ 7 ]
initial
begin
	ALU_result_expected[7] = 1'bX;
end 
// expected ALU_result[ 6 ]
initial
begin
	ALU_result_expected[6] = 1'bX;
end 
// expected ALU_result[ 5 ]
initial
begin
	ALU_result_expected[5] = 1'bX;
end 
// expected ALU_result[ 4 ]
initial
begin
	ALU_result_expected[4] = 1'bX;
end 
// expected ALU_result[ 3 ]
initial
begin
	ALU_result_expected[3] = 1'bX;
end 
// expected ALU_result[ 2 ]
initial
begin
	ALU_result_expected[2] = 1'bX;
end 
// expected ALU_result[ 1 ]
initial
begin
	ALU_result_expected[1] = 1'bX;
end 
// expected ALU_result[ 0 ]
initial
begin
	ALU_result_expected[0] = 1'bX;
end 
// expected Operand1[ 7 ]
initial
begin
	Operand1_expected[7] = 1'bX;
end 
// expected Operand1[ 6 ]
initial
begin
	Operand1_expected[6] = 1'bX;
end 
// expected Operand1[ 5 ]
initial
begin
	Operand1_expected[5] = 1'bX;
end 
// expected Operand1[ 4 ]
initial
begin
	Operand1_expected[4] = 1'bX;
end 
// expected Operand1[ 3 ]
initial
begin
	Operand1_expected[3] = 1'bX;
end 
// expected Operand1[ 2 ]
initial
begin
	Operand1_expected[2] = 1'bX;
end 
// expected Operand1[ 1 ]
initial
begin
	Operand1_expected[1] = 1'bX;
end 
// expected Operand1[ 0 ]
initial
begin
	Operand1_expected[0] = 1'bX;
end 
// expected Operand2[ 7 ]
initial
begin
	Operand2_expected[7] = 1'bX;
end 
// expected Operand2[ 6 ]
initial
begin
	Operand2_expected[6] = 1'bX;
end 
// expected Operand2[ 5 ]
initial
begin
	Operand2_expected[5] = 1'bX;
end 
// expected Operand2[ 4 ]
initial
begin
	Operand2_expected[4] = 1'bX;
end 
// expected Operand2[ 3 ]
initial
begin
	Operand2_expected[3] = 1'bX;
end 
// expected Operand2[ 2 ]
initial
begin
	Operand2_expected[2] = 1'bX;
end 
// expected Operand2[ 1 ]
initial
begin
	Operand2_expected[1] = 1'bX;
end 
// expected Operand2[ 0 ]
initial
begin
	Operand2_expected[0] = 1'bX;
end 
// expected Read_Data[ 15 ]
initial
begin
	Read_Data_expected[15] = 1'bX;
end 
// expected Read_Data[ 14 ]
initial
begin
	Read_Data_expected[14] = 1'bX;
end 
// expected Read_Data[ 13 ]
initial
begin
	Read_Data_expected[13] = 1'bX;
end 
// expected Read_Data[ 12 ]
initial
begin
	Read_Data_expected[12] = 1'bX;
end 
// expected Read_Data[ 11 ]
initial
begin
	Read_Data_expected[11] = 1'bX;
end 
// expected Read_Data[ 10 ]
initial
begin
	Read_Data_expected[10] = 1'bX;
end 
// expected Read_Data[ 9 ]
initial
begin
	Read_Data_expected[9] = 1'bX;
end 
// expected Read_Data[ 8 ]
initial
begin
	Read_Data_expected[8] = 1'bX;
end 
// expected Read_Data[ 7 ]
initial
begin
	Read_Data_expected[7] = 1'bX;
end 
// expected Read_Data[ 6 ]
initial
begin
	Read_Data_expected[6] = 1'bX;
end 
// expected Read_Data[ 5 ]
initial
begin
	Read_Data_expected[5] = 1'bX;
end 
// expected Read_Data[ 4 ]
initial
begin
	Read_Data_expected[4] = 1'bX;
end 
// expected Read_Data[ 3 ]
initial
begin
	Read_Data_expected[3] = 1'bX;
end 
// expected Read_Data[ 2 ]
initial
begin
	Read_Data_expected[2] = 1'bX;
end 
// expected Read_Data[ 1 ]
initial
begin
	Read_Data_expected[1] = 1'bX;
end 
// expected Read_Data[ 0 ]
initial
begin
	Read_Data_expected[0] = 1'bX;
end 
// expected Reg1[ 7 ]
initial
begin
	Reg1_expected[7] = 1'bX;
end 
// expected Reg1[ 6 ]
initial
begin
	Reg1_expected[6] = 1'bX;
end 
// expected Reg1[ 5 ]
initial
begin
	Reg1_expected[5] = 1'bX;
end 
// expected Reg1[ 4 ]
initial
begin
	Reg1_expected[4] = 1'bX;
end 
// expected Reg1[ 3 ]
initial
begin
	Reg1_expected[3] = 1'bX;
end 
// expected Reg1[ 2 ]
initial
begin
	Reg1_expected[2] = 1'bX;
end 
// expected Reg1[ 1 ]
initial
begin
	Reg1_expected[1] = 1'bX;
end 
// expected Reg1[ 0 ]
initial
begin
	Reg1_expected[0] = 1'bX;
end 
// expected Reg2[ 7 ]
initial
begin
	Reg2_expected[7] = 1'bX;
end 
// expected Reg2[ 6 ]
initial
begin
	Reg2_expected[6] = 1'bX;
end 
// expected Reg2[ 5 ]
initial
begin
	Reg2_expected[5] = 1'bX;
end 
// expected Reg2[ 4 ]
initial
begin
	Reg2_expected[4] = 1'bX;
end 
// expected Reg2[ 3 ]
initial
begin
	Reg2_expected[3] = 1'bX;
end 
// expected Reg2[ 2 ]
initial
begin
	Reg2_expected[2] = 1'bX;
end 
// expected Reg2[ 1 ]
initial
begin
	Reg2_expected[1] = 1'bX;
end 
// expected Reg2[ 0 ]
initial
begin
	Reg2_expected[0] = 1'bX;
end 
// expected Write_Data[ 7 ]
initial
begin
	Write_Data_expected[7] = 1'bX;
end 
// expected Write_Data[ 6 ]
initial
begin
	Write_Data_expected[6] = 1'bX;
end 
// expected Write_Data[ 5 ]
initial
begin
	Write_Data_expected[5] = 1'bX;
end 
// expected Write_Data[ 4 ]
initial
begin
	Write_Data_expected[4] = 1'bX;
end 
// expected Write_Data[ 3 ]
initial
begin
	Write_Data_expected[3] = 1'bX;
end 
// expected Write_Data[ 2 ]
initial
begin
	Write_Data_expected[2] = 1'bX;
end 
// expected Write_Data[ 1 ]
initial
begin
	Write_Data_expected[1] = 1'bX;
end 
// expected Write_Data[ 0 ]
initial
begin
	Write_Data_expected[0] = 1'bX;
end 
// expected Write_Register[ 2 ]
initial
begin
	Write_Register_expected[2] = 1'bX;
end 
// expected Write_Register[ 1 ]
initial
begin
	Write_Register_expected[1] = 1'bX;
end 
// expected Write_Register[ 0 ]
initial
begin
	Write_Register_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_result_expected or ALU_result or Instruction_expected or Instruction or Operand1_expected or Operand1 or Operand2_expected or Operand2 or PC_OUT_expected or PC_OUT or Read_Data_expected or Read_Data or Reg1_expected or Reg1 or Reg2_expected or Reg2 or Write_Data_expected or Write_Data or Write_Register_expected or Write_Register)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_result = %b | expected Instruction = %b | expected Operand1 = %b | expected Operand2 = %b | expected PC_OUT = %b | expected Read_Data = %b | expected Reg1 = %b | expected Reg2 = %b | expected Write_Data = %b | expected Write_Register = %b | ",ALU_result_expected_prev,Instruction_expected_prev,Operand1_expected_prev,Operand2_expected_prev,PC_OUT_expected_prev,Read_Data_expected_prev,Reg1_expected_prev,Reg2_expected_prev,Write_Data_expected_prev,Write_Register_expected_prev);
	$display("| real ALU_result = %b | real Instruction = %b | real Operand1 = %b | real Operand2 = %b | real PC_OUT = %b | real Read_Data = %b | real Reg1 = %b | real Reg2 = %b | real Write_Data = %b | real Write_Register = %b | ",ALU_result_prev,Instruction_prev,Operand1_prev,Operand2_prev,PC_OUT_prev,Read_Data_prev,Reg1_prev,Reg2_prev,Write_Data_prev,Write_Register_prev);
`endif
	if (
		( ALU_result_expected_prev[0] !== 1'bx ) && ( ALU_result_prev[0] !== ALU_result_expected_prev[0] )
		&& ((ALU_result_expected_prev[0] !== last_ALU_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[0] = ALU_result_expected_prev[0];
	end
	if (
		( ALU_result_expected_prev[1] !== 1'bx ) && ( ALU_result_prev[1] !== ALU_result_expected_prev[1] )
		&& ((ALU_result_expected_prev[1] !== last_ALU_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[1] = ALU_result_expected_prev[1];
	end
	if (
		( ALU_result_expected_prev[2] !== 1'bx ) && ( ALU_result_prev[2] !== ALU_result_expected_prev[2] )
		&& ((ALU_result_expected_prev[2] !== last_ALU_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[2] = ALU_result_expected_prev[2];
	end
	if (
		( ALU_result_expected_prev[3] !== 1'bx ) && ( ALU_result_prev[3] !== ALU_result_expected_prev[3] )
		&& ((ALU_result_expected_prev[3] !== last_ALU_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[3] = ALU_result_expected_prev[3];
	end
	if (
		( ALU_result_expected_prev[4] !== 1'bx ) && ( ALU_result_prev[4] !== ALU_result_expected_prev[4] )
		&& ((ALU_result_expected_prev[4] !== last_ALU_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[4] = ALU_result_expected_prev[4];
	end
	if (
		( ALU_result_expected_prev[5] !== 1'bx ) && ( ALU_result_prev[5] !== ALU_result_expected_prev[5] )
		&& ((ALU_result_expected_prev[5] !== last_ALU_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[5] = ALU_result_expected_prev[5];
	end
	if (
		( ALU_result_expected_prev[6] !== 1'bx ) && ( ALU_result_prev[6] !== ALU_result_expected_prev[6] )
		&& ((ALU_result_expected_prev[6] !== last_ALU_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[6] = ALU_result_expected_prev[6];
	end
	if (
		( ALU_result_expected_prev[7] !== 1'bx ) && ( ALU_result_prev[7] !== ALU_result_expected_prev[7] )
		&& ((ALU_result_expected_prev[7] !== last_ALU_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_result_exp[7] = ALU_result_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( Operand1_expected_prev[0] !== 1'bx ) && ( Operand1_prev[0] !== Operand1_expected_prev[0] )
		&& ((Operand1_expected_prev[0] !== last_Operand1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[0] = Operand1_expected_prev[0];
	end
	if (
		( Operand1_expected_prev[1] !== 1'bx ) && ( Operand1_prev[1] !== Operand1_expected_prev[1] )
		&& ((Operand1_expected_prev[1] !== last_Operand1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[1] = Operand1_expected_prev[1];
	end
	if (
		( Operand1_expected_prev[2] !== 1'bx ) && ( Operand1_prev[2] !== Operand1_expected_prev[2] )
		&& ((Operand1_expected_prev[2] !== last_Operand1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[2] = Operand1_expected_prev[2];
	end
	if (
		( Operand1_expected_prev[3] !== 1'bx ) && ( Operand1_prev[3] !== Operand1_expected_prev[3] )
		&& ((Operand1_expected_prev[3] !== last_Operand1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[3] = Operand1_expected_prev[3];
	end
	if (
		( Operand1_expected_prev[4] !== 1'bx ) && ( Operand1_prev[4] !== Operand1_expected_prev[4] )
		&& ((Operand1_expected_prev[4] !== last_Operand1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[4] = Operand1_expected_prev[4];
	end
	if (
		( Operand1_expected_prev[5] !== 1'bx ) && ( Operand1_prev[5] !== Operand1_expected_prev[5] )
		&& ((Operand1_expected_prev[5] !== last_Operand1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[5] = Operand1_expected_prev[5];
	end
	if (
		( Operand1_expected_prev[6] !== 1'bx ) && ( Operand1_prev[6] !== Operand1_expected_prev[6] )
		&& ((Operand1_expected_prev[6] !== last_Operand1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[6] = Operand1_expected_prev[6];
	end
	if (
		( Operand1_expected_prev[7] !== 1'bx ) && ( Operand1_prev[7] !== Operand1_expected_prev[7] )
		&& ((Operand1_expected_prev[7] !== last_Operand1_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand1_expected_prev);
		$display ("     Real value = %b", Operand1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Operand1_exp[7] = Operand1_expected_prev[7];
	end
	if (
		( Operand2_expected_prev[0] !== 1'bx ) && ( Operand2_prev[0] !== Operand2_expected_prev[0] )
		&& ((Operand2_expected_prev[0] !== last_Operand2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[0] = Operand2_expected_prev[0];
	end
	if (
		( Operand2_expected_prev[1] !== 1'bx ) && ( Operand2_prev[1] !== Operand2_expected_prev[1] )
		&& ((Operand2_expected_prev[1] !== last_Operand2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[1] = Operand2_expected_prev[1];
	end
	if (
		( Operand2_expected_prev[2] !== 1'bx ) && ( Operand2_prev[2] !== Operand2_expected_prev[2] )
		&& ((Operand2_expected_prev[2] !== last_Operand2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[2] = Operand2_expected_prev[2];
	end
	if (
		( Operand2_expected_prev[3] !== 1'bx ) && ( Operand2_prev[3] !== Operand2_expected_prev[3] )
		&& ((Operand2_expected_prev[3] !== last_Operand2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[3] = Operand2_expected_prev[3];
	end
	if (
		( Operand2_expected_prev[4] !== 1'bx ) && ( Operand2_prev[4] !== Operand2_expected_prev[4] )
		&& ((Operand2_expected_prev[4] !== last_Operand2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[4] = Operand2_expected_prev[4];
	end
	if (
		( Operand2_expected_prev[5] !== 1'bx ) && ( Operand2_prev[5] !== Operand2_expected_prev[5] )
		&& ((Operand2_expected_prev[5] !== last_Operand2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[5] = Operand2_expected_prev[5];
	end
	if (
		( Operand2_expected_prev[6] !== 1'bx ) && ( Operand2_prev[6] !== Operand2_expected_prev[6] )
		&& ((Operand2_expected_prev[6] !== last_Operand2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[6] = Operand2_expected_prev[6];
	end
	if (
		( Operand2_expected_prev[7] !== 1'bx ) && ( Operand2_prev[7] !== Operand2_expected_prev[7] )
		&& ((Operand2_expected_prev[7] !== last_Operand2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operand2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operand2_expected_prev);
		$display ("     Real value = %b", Operand2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Operand2_exp[7] = Operand2_expected_prev[7];
	end
	if (
		( PC_OUT_expected_prev[0] !== 1'bx ) && ( PC_OUT_prev[0] !== PC_OUT_expected_prev[0] )
		&& ((PC_OUT_expected_prev[0] !== last_PC_OUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[0] = PC_OUT_expected_prev[0];
	end
	if (
		( PC_OUT_expected_prev[1] !== 1'bx ) && ( PC_OUT_prev[1] !== PC_OUT_expected_prev[1] )
		&& ((PC_OUT_expected_prev[1] !== last_PC_OUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[1] = PC_OUT_expected_prev[1];
	end
	if (
		( PC_OUT_expected_prev[2] !== 1'bx ) && ( PC_OUT_prev[2] !== PC_OUT_expected_prev[2] )
		&& ((PC_OUT_expected_prev[2] !== last_PC_OUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[2] = PC_OUT_expected_prev[2];
	end
	if (
		( PC_OUT_expected_prev[3] !== 1'bx ) && ( PC_OUT_prev[3] !== PC_OUT_expected_prev[3] )
		&& ((PC_OUT_expected_prev[3] !== last_PC_OUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[3] = PC_OUT_expected_prev[3];
	end
	if (
		( PC_OUT_expected_prev[4] !== 1'bx ) && ( PC_OUT_prev[4] !== PC_OUT_expected_prev[4] )
		&& ((PC_OUT_expected_prev[4] !== last_PC_OUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[4] = PC_OUT_expected_prev[4];
	end
	if (
		( PC_OUT_expected_prev[5] !== 1'bx ) && ( PC_OUT_prev[5] !== PC_OUT_expected_prev[5] )
		&& ((PC_OUT_expected_prev[5] !== last_PC_OUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[5] = PC_OUT_expected_prev[5];
	end
	if (
		( PC_OUT_expected_prev[6] !== 1'bx ) && ( PC_OUT_prev[6] !== PC_OUT_expected_prev[6] )
		&& ((PC_OUT_expected_prev[6] !== last_PC_OUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[6] = PC_OUT_expected_prev[6];
	end
	if (
		( PC_OUT_expected_prev[7] !== 1'bx ) && ( PC_OUT_prev[7] !== PC_OUT_expected_prev[7] )
		&& ((PC_OUT_expected_prev[7] !== last_PC_OUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_OUT_exp[7] = PC_OUT_expected_prev[7];
	end
	if (
		( Read_Data_expected_prev[0] !== 1'bx ) && ( Read_Data_prev[0] !== Read_Data_expected_prev[0] )
		&& ((Read_Data_expected_prev[0] !== last_Read_Data_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[0] = Read_Data_expected_prev[0];
	end
	if (
		( Read_Data_expected_prev[1] !== 1'bx ) && ( Read_Data_prev[1] !== Read_Data_expected_prev[1] )
		&& ((Read_Data_expected_prev[1] !== last_Read_Data_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[1] = Read_Data_expected_prev[1];
	end
	if (
		( Read_Data_expected_prev[2] !== 1'bx ) && ( Read_Data_prev[2] !== Read_Data_expected_prev[2] )
		&& ((Read_Data_expected_prev[2] !== last_Read_Data_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[2] = Read_Data_expected_prev[2];
	end
	if (
		( Read_Data_expected_prev[3] !== 1'bx ) && ( Read_Data_prev[3] !== Read_Data_expected_prev[3] )
		&& ((Read_Data_expected_prev[3] !== last_Read_Data_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[3] = Read_Data_expected_prev[3];
	end
	if (
		( Read_Data_expected_prev[4] !== 1'bx ) && ( Read_Data_prev[4] !== Read_Data_expected_prev[4] )
		&& ((Read_Data_expected_prev[4] !== last_Read_Data_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[4] = Read_Data_expected_prev[4];
	end
	if (
		( Read_Data_expected_prev[5] !== 1'bx ) && ( Read_Data_prev[5] !== Read_Data_expected_prev[5] )
		&& ((Read_Data_expected_prev[5] !== last_Read_Data_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[5] = Read_Data_expected_prev[5];
	end
	if (
		( Read_Data_expected_prev[6] !== 1'bx ) && ( Read_Data_prev[6] !== Read_Data_expected_prev[6] )
		&& ((Read_Data_expected_prev[6] !== last_Read_Data_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[6] = Read_Data_expected_prev[6];
	end
	if (
		( Read_Data_expected_prev[7] !== 1'bx ) && ( Read_Data_prev[7] !== Read_Data_expected_prev[7] )
		&& ((Read_Data_expected_prev[7] !== last_Read_Data_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[7] = Read_Data_expected_prev[7];
	end
	if (
		( Read_Data_expected_prev[8] !== 1'bx ) && ( Read_Data_prev[8] !== Read_Data_expected_prev[8] )
		&& ((Read_Data_expected_prev[8] !== last_Read_Data_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[8] = Read_Data_expected_prev[8];
	end
	if (
		( Read_Data_expected_prev[9] !== 1'bx ) && ( Read_Data_prev[9] !== Read_Data_expected_prev[9] )
		&& ((Read_Data_expected_prev[9] !== last_Read_Data_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[9] = Read_Data_expected_prev[9];
	end
	if (
		( Read_Data_expected_prev[10] !== 1'bx ) && ( Read_Data_prev[10] !== Read_Data_expected_prev[10] )
		&& ((Read_Data_expected_prev[10] !== last_Read_Data_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[10] = Read_Data_expected_prev[10];
	end
	if (
		( Read_Data_expected_prev[11] !== 1'bx ) && ( Read_Data_prev[11] !== Read_Data_expected_prev[11] )
		&& ((Read_Data_expected_prev[11] !== last_Read_Data_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[11] = Read_Data_expected_prev[11];
	end
	if (
		( Read_Data_expected_prev[12] !== 1'bx ) && ( Read_Data_prev[12] !== Read_Data_expected_prev[12] )
		&& ((Read_Data_expected_prev[12] !== last_Read_Data_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[12] = Read_Data_expected_prev[12];
	end
	if (
		( Read_Data_expected_prev[13] !== 1'bx ) && ( Read_Data_prev[13] !== Read_Data_expected_prev[13] )
		&& ((Read_Data_expected_prev[13] !== last_Read_Data_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[13] = Read_Data_expected_prev[13];
	end
	if (
		( Read_Data_expected_prev[14] !== 1'bx ) && ( Read_Data_prev[14] !== Read_Data_expected_prev[14] )
		&& ((Read_Data_expected_prev[14] !== last_Read_Data_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[14] = Read_Data_expected_prev[14];
	end
	if (
		( Read_Data_expected_prev[15] !== 1'bx ) && ( Read_Data_prev[15] !== Read_Data_expected_prev[15] )
		&& ((Read_Data_expected_prev[15] !== last_Read_Data_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_expected_prev);
		$display ("     Real value = %b", Read_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Read_Data_exp[15] = Read_Data_expected_prev[15];
	end
	if (
		( Reg1_expected_prev[0] !== 1'bx ) && ( Reg1_prev[0] !== Reg1_expected_prev[0] )
		&& ((Reg1_expected_prev[0] !== last_Reg1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[0] = Reg1_expected_prev[0];
	end
	if (
		( Reg1_expected_prev[1] !== 1'bx ) && ( Reg1_prev[1] !== Reg1_expected_prev[1] )
		&& ((Reg1_expected_prev[1] !== last_Reg1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[1] = Reg1_expected_prev[1];
	end
	if (
		( Reg1_expected_prev[2] !== 1'bx ) && ( Reg1_prev[2] !== Reg1_expected_prev[2] )
		&& ((Reg1_expected_prev[2] !== last_Reg1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[2] = Reg1_expected_prev[2];
	end
	if (
		( Reg1_expected_prev[3] !== 1'bx ) && ( Reg1_prev[3] !== Reg1_expected_prev[3] )
		&& ((Reg1_expected_prev[3] !== last_Reg1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[3] = Reg1_expected_prev[3];
	end
	if (
		( Reg1_expected_prev[4] !== 1'bx ) && ( Reg1_prev[4] !== Reg1_expected_prev[4] )
		&& ((Reg1_expected_prev[4] !== last_Reg1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[4] = Reg1_expected_prev[4];
	end
	if (
		( Reg1_expected_prev[5] !== 1'bx ) && ( Reg1_prev[5] !== Reg1_expected_prev[5] )
		&& ((Reg1_expected_prev[5] !== last_Reg1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[5] = Reg1_expected_prev[5];
	end
	if (
		( Reg1_expected_prev[6] !== 1'bx ) && ( Reg1_prev[6] !== Reg1_expected_prev[6] )
		&& ((Reg1_expected_prev[6] !== last_Reg1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[6] = Reg1_expected_prev[6];
	end
	if (
		( Reg1_expected_prev[7] !== 1'bx ) && ( Reg1_prev[7] !== Reg1_expected_prev[7] )
		&& ((Reg1_expected_prev[7] !== last_Reg1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg1_expected_prev);
		$display ("     Real value = %b", Reg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Reg1_exp[7] = Reg1_expected_prev[7];
	end
	if (
		( Reg2_expected_prev[0] !== 1'bx ) && ( Reg2_prev[0] !== Reg2_expected_prev[0] )
		&& ((Reg2_expected_prev[0] !== last_Reg2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[0] = Reg2_expected_prev[0];
	end
	if (
		( Reg2_expected_prev[1] !== 1'bx ) && ( Reg2_prev[1] !== Reg2_expected_prev[1] )
		&& ((Reg2_expected_prev[1] !== last_Reg2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[1] = Reg2_expected_prev[1];
	end
	if (
		( Reg2_expected_prev[2] !== 1'bx ) && ( Reg2_prev[2] !== Reg2_expected_prev[2] )
		&& ((Reg2_expected_prev[2] !== last_Reg2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[2] = Reg2_expected_prev[2];
	end
	if (
		( Reg2_expected_prev[3] !== 1'bx ) && ( Reg2_prev[3] !== Reg2_expected_prev[3] )
		&& ((Reg2_expected_prev[3] !== last_Reg2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[3] = Reg2_expected_prev[3];
	end
	if (
		( Reg2_expected_prev[4] !== 1'bx ) && ( Reg2_prev[4] !== Reg2_expected_prev[4] )
		&& ((Reg2_expected_prev[4] !== last_Reg2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[4] = Reg2_expected_prev[4];
	end
	if (
		( Reg2_expected_prev[5] !== 1'bx ) && ( Reg2_prev[5] !== Reg2_expected_prev[5] )
		&& ((Reg2_expected_prev[5] !== last_Reg2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[5] = Reg2_expected_prev[5];
	end
	if (
		( Reg2_expected_prev[6] !== 1'bx ) && ( Reg2_prev[6] !== Reg2_expected_prev[6] )
		&& ((Reg2_expected_prev[6] !== last_Reg2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[6] = Reg2_expected_prev[6];
	end
	if (
		( Reg2_expected_prev[7] !== 1'bx ) && ( Reg2_prev[7] !== Reg2_expected_prev[7] )
		&& ((Reg2_expected_prev[7] !== last_Reg2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg2_expected_prev);
		$display ("     Real value = %b", Reg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg2_exp[7] = Reg2_expected_prev[7];
	end
	if (
		( Write_Data_expected_prev[0] !== 1'bx ) && ( Write_Data_prev[0] !== Write_Data_expected_prev[0] )
		&& ((Write_Data_expected_prev[0] !== last_Write_Data_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[0] = Write_Data_expected_prev[0];
	end
	if (
		( Write_Data_expected_prev[1] !== 1'bx ) && ( Write_Data_prev[1] !== Write_Data_expected_prev[1] )
		&& ((Write_Data_expected_prev[1] !== last_Write_Data_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[1] = Write_Data_expected_prev[1];
	end
	if (
		( Write_Data_expected_prev[2] !== 1'bx ) && ( Write_Data_prev[2] !== Write_Data_expected_prev[2] )
		&& ((Write_Data_expected_prev[2] !== last_Write_Data_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[2] = Write_Data_expected_prev[2];
	end
	if (
		( Write_Data_expected_prev[3] !== 1'bx ) && ( Write_Data_prev[3] !== Write_Data_expected_prev[3] )
		&& ((Write_Data_expected_prev[3] !== last_Write_Data_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[3] = Write_Data_expected_prev[3];
	end
	if (
		( Write_Data_expected_prev[4] !== 1'bx ) && ( Write_Data_prev[4] !== Write_Data_expected_prev[4] )
		&& ((Write_Data_expected_prev[4] !== last_Write_Data_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[4] = Write_Data_expected_prev[4];
	end
	if (
		( Write_Data_expected_prev[5] !== 1'bx ) && ( Write_Data_prev[5] !== Write_Data_expected_prev[5] )
		&& ((Write_Data_expected_prev[5] !== last_Write_Data_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[5] = Write_Data_expected_prev[5];
	end
	if (
		( Write_Data_expected_prev[6] !== 1'bx ) && ( Write_Data_prev[6] !== Write_Data_expected_prev[6] )
		&& ((Write_Data_expected_prev[6] !== last_Write_Data_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[6] = Write_Data_expected_prev[6];
	end
	if (
		( Write_Data_expected_prev[7] !== 1'bx ) && ( Write_Data_prev[7] !== Write_Data_expected_prev[7] )
		&& ((Write_Data_expected_prev[7] !== last_Write_Data_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Data_expected_prev);
		$display ("     Real value = %b", Write_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_Data_exp[7] = Write_Data_expected_prev[7];
	end
	if (
		( Write_Register_expected_prev[0] !== 1'bx ) && ( Write_Register_prev[0] !== Write_Register_expected_prev[0] )
		&& ((Write_Register_expected_prev[0] !== last_Write_Register_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_expected_prev);
		$display ("     Real value = %b", Write_Register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Write_Register_exp[0] = Write_Register_expected_prev[0];
	end
	if (
		( Write_Register_expected_prev[1] !== 1'bx ) && ( Write_Register_prev[1] !== Write_Register_expected_prev[1] )
		&& ((Write_Register_expected_prev[1] !== last_Write_Register_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_expected_prev);
		$display ("     Real value = %b", Write_Register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Write_Register_exp[1] = Write_Register_expected_prev[1];
	end
	if (
		( Write_Register_expected_prev[2] !== 1'bx ) && ( Write_Register_prev[2] !== Write_Register_expected_prev[2] )
		&& ((Write_Register_expected_prev[2] !== last_Write_Register_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Register[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Register_expected_prev);
		$display ("     Real value = %b", Write_Register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Write_Register_exp[2] = Write_Register_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU_ENABLE;
reg CLOCK;
// wires                                               
wire [7:0] ALU_result;
wire [15:0] Instruction;
wire [7:0] Operand1;
wire [7:0] Operand2;
wire [7:0] PC_OUT;
wire [15:0] Read_Data;
wire [7:0] Reg1;
wire [7:0] Reg2;
wire [7:0] Write_Data;
wire [2:0] Write_Register;

wire sampler;                             

// assign statements (if any)                          
MIPS_CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_ENABLE(ALU_ENABLE),
	.ALU_result(ALU_result),
	.CLOCK(CLOCK),
	.Instruction(Instruction),
	.Operand1(Operand1),
	.Operand2(Operand2),
	.PC_OUT(PC_OUT),
	.Read_Data(Read_Data),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.Write_Data(Write_Data),
	.Write_Register(Write_Register)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #20000 1'b1;
	#20000;
end 

// ALU_ENABLE
initial
begin
	ALU_ENABLE = 1'b1;
end 

MIPS_CPU_vlg_sample_tst tb_sample (
	.ALU_ENABLE(ALU_ENABLE),
	.CLOCK(CLOCK),
	.sampler_tx(sampler)
);

MIPS_CPU_vlg_check_tst tb_out(
	.ALU_result(ALU_result),
	.Instruction(Instruction),
	.Operand1(Operand1),
	.Operand2(Operand2),
	.PC_OUT(PC_OUT),
	.Read_Data(Read_Data),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.Write_Data(Write_Data),
	.Write_Register(Write_Register),
	.sampler_rx(sampler)
);
endmodule

