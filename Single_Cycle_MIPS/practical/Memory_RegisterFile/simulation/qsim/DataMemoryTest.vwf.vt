// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/31/2024 12:49:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DataMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DataMemory_vlg_sample_tst(
	Address,
	CLOCK,
	MemRead,
	MemWrite,
	WriteData,
	sampler_tx
);
input [7:0] Address;
input  CLOCK;
input  MemRead;
input  MemWrite;
input [15:0] WriteData;
output sampler_tx;

reg sample;
time current_time;
always @(Address or CLOCK or MemRead or MemWrite or WriteData)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DataMemory_vlg_check_tst (
	ReadData,
	WriteData,
	sampler_rx
);
input [15:0] ReadData;
input [15:0] WriteData;
input sampler_rx;

reg [15:0] ReadData_expected;
reg [15:0] WriteData_expected;

reg [15:0] ReadData_prev;
reg [15:0] WriteData_prev;

reg [15:0] ReadData_expected_prev;
reg [15:0] WriteData_expected_prev;

reg [15:0] last_ReadData_exp;
reg [15:0] last_WriteData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ReadData_prev = ReadData;
	WriteData_prev = WriteData;
end

// update expected /o prevs

always @(trigger)
begin
	ReadData_expected_prev = ReadData_expected;
	WriteData_expected_prev = WriteData_expected;
end


// expected ReadData[ 15 ]
initial
begin
	ReadData_expected[15] = 1'bX;
end 
// expected ReadData[ 14 ]
initial
begin
	ReadData_expected[14] = 1'bX;
end 
// expected ReadData[ 13 ]
initial
begin
	ReadData_expected[13] = 1'bX;
end 
// expected ReadData[ 12 ]
initial
begin
	ReadData_expected[12] = 1'bX;
end 
// expected ReadData[ 11 ]
initial
begin
	ReadData_expected[11] = 1'bX;
end 
// expected ReadData[ 10 ]
initial
begin
	ReadData_expected[10] = 1'bX;
end 
// expected ReadData[ 9 ]
initial
begin
	ReadData_expected[9] = 1'bX;
end 
// expected ReadData[ 8 ]
initial
begin
	ReadData_expected[8] = 1'bX;
end 
// expected ReadData[ 7 ]
initial
begin
	ReadData_expected[7] = 1'bX;
end 
// expected ReadData[ 6 ]
initial
begin
	ReadData_expected[6] = 1'bX;
end 
// expected ReadData[ 5 ]
initial
begin
	ReadData_expected[5] = 1'bX;
end 
// expected ReadData[ 4 ]
initial
begin
	ReadData_expected[4] = 1'bX;
end 
// expected ReadData[ 3 ]
initial
begin
	ReadData_expected[3] = 1'bX;
end 
// expected ReadData[ 2 ]
initial
begin
	ReadData_expected[2] = 1'bX;
end 
// expected ReadData[ 1 ]
initial
begin
	ReadData_expected[1] = 1'bX;
end 
// expected ReadData[ 0 ]
initial
begin
	ReadData_expected[0] = 1'bX;
end 
// generate trigger
always @(ReadData_expected or ReadData or WriteData_expected or WriteData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ReadData = %b | expected WriteData = %b | ",ReadData_expected_prev,WriteData_expected_prev);
	$display("| real ReadData = %b | real WriteData = %b | ",ReadData_prev,WriteData_prev);
`endif
	if (
		( ReadData_expected_prev[0] !== 1'bx ) && ( ReadData_prev[0] !== ReadData_expected_prev[0] )
		&& ((ReadData_expected_prev[0] !== last_ReadData_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[0] = ReadData_expected_prev[0];
	end
	if (
		( ReadData_expected_prev[1] !== 1'bx ) && ( ReadData_prev[1] !== ReadData_expected_prev[1] )
		&& ((ReadData_expected_prev[1] !== last_ReadData_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[1] = ReadData_expected_prev[1];
	end
	if (
		( ReadData_expected_prev[2] !== 1'bx ) && ( ReadData_prev[2] !== ReadData_expected_prev[2] )
		&& ((ReadData_expected_prev[2] !== last_ReadData_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[2] = ReadData_expected_prev[2];
	end
	if (
		( ReadData_expected_prev[3] !== 1'bx ) && ( ReadData_prev[3] !== ReadData_expected_prev[3] )
		&& ((ReadData_expected_prev[3] !== last_ReadData_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[3] = ReadData_expected_prev[3];
	end
	if (
		( ReadData_expected_prev[4] !== 1'bx ) && ( ReadData_prev[4] !== ReadData_expected_prev[4] )
		&& ((ReadData_expected_prev[4] !== last_ReadData_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[4] = ReadData_expected_prev[4];
	end
	if (
		( ReadData_expected_prev[5] !== 1'bx ) && ( ReadData_prev[5] !== ReadData_expected_prev[5] )
		&& ((ReadData_expected_prev[5] !== last_ReadData_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[5] = ReadData_expected_prev[5];
	end
	if (
		( ReadData_expected_prev[6] !== 1'bx ) && ( ReadData_prev[6] !== ReadData_expected_prev[6] )
		&& ((ReadData_expected_prev[6] !== last_ReadData_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[6] = ReadData_expected_prev[6];
	end
	if (
		( ReadData_expected_prev[7] !== 1'bx ) && ( ReadData_prev[7] !== ReadData_expected_prev[7] )
		&& ((ReadData_expected_prev[7] !== last_ReadData_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[7] = ReadData_expected_prev[7];
	end
	if (
		( ReadData_expected_prev[8] !== 1'bx ) && ( ReadData_prev[8] !== ReadData_expected_prev[8] )
		&& ((ReadData_expected_prev[8] !== last_ReadData_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[8] = ReadData_expected_prev[8];
	end
	if (
		( ReadData_expected_prev[9] !== 1'bx ) && ( ReadData_prev[9] !== ReadData_expected_prev[9] )
		&& ((ReadData_expected_prev[9] !== last_ReadData_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[9] = ReadData_expected_prev[9];
	end
	if (
		( ReadData_expected_prev[10] !== 1'bx ) && ( ReadData_prev[10] !== ReadData_expected_prev[10] )
		&& ((ReadData_expected_prev[10] !== last_ReadData_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[10] = ReadData_expected_prev[10];
	end
	if (
		( ReadData_expected_prev[11] !== 1'bx ) && ( ReadData_prev[11] !== ReadData_expected_prev[11] )
		&& ((ReadData_expected_prev[11] !== last_ReadData_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[11] = ReadData_expected_prev[11];
	end
	if (
		( ReadData_expected_prev[12] !== 1'bx ) && ( ReadData_prev[12] !== ReadData_expected_prev[12] )
		&& ((ReadData_expected_prev[12] !== last_ReadData_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[12] = ReadData_expected_prev[12];
	end
	if (
		( ReadData_expected_prev[13] !== 1'bx ) && ( ReadData_prev[13] !== ReadData_expected_prev[13] )
		&& ((ReadData_expected_prev[13] !== last_ReadData_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[13] = ReadData_expected_prev[13];
	end
	if (
		( ReadData_expected_prev[14] !== 1'bx ) && ( ReadData_prev[14] !== ReadData_expected_prev[14] )
		&& ((ReadData_expected_prev[14] !== last_ReadData_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[14] = ReadData_expected_prev[14];
	end
	if (
		( ReadData_expected_prev[15] !== 1'bx ) && ( ReadData_prev[15] !== ReadData_expected_prev[15] )
		&& ((ReadData_expected_prev[15] !== last_ReadData_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData_exp[15] = ReadData_expected_prev[15];
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( WriteData_expected_prev[8] !== 1'bx ) && ( WriteData_prev[8] !== WriteData_expected_prev[8] )
		&& ((WriteData_expected_prev[8] !== last_WriteData_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[8] = WriteData_expected_prev[8];
	end
	if (
		( WriteData_expected_prev[9] !== 1'bx ) && ( WriteData_prev[9] !== WriteData_expected_prev[9] )
		&& ((WriteData_expected_prev[9] !== last_WriteData_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[9] = WriteData_expected_prev[9];
	end
	if (
		( WriteData_expected_prev[10] !== 1'bx ) && ( WriteData_prev[10] !== WriteData_expected_prev[10] )
		&& ((WriteData_expected_prev[10] !== last_WriteData_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[10] = WriteData_expected_prev[10];
	end
	if (
		( WriteData_expected_prev[11] !== 1'bx ) && ( WriteData_prev[11] !== WriteData_expected_prev[11] )
		&& ((WriteData_expected_prev[11] !== last_WriteData_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[11] = WriteData_expected_prev[11];
	end
	if (
		( WriteData_expected_prev[12] !== 1'bx ) && ( WriteData_prev[12] !== WriteData_expected_prev[12] )
		&& ((WriteData_expected_prev[12] !== last_WriteData_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[12] = WriteData_expected_prev[12];
	end
	if (
		( WriteData_expected_prev[13] !== 1'bx ) && ( WriteData_prev[13] !== WriteData_expected_prev[13] )
		&& ((WriteData_expected_prev[13] !== last_WriteData_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[13] = WriteData_expected_prev[13];
	end
	if (
		( WriteData_expected_prev[14] !== 1'bx ) && ( WriteData_prev[14] !== WriteData_expected_prev[14] )
		&& ((WriteData_expected_prev[14] !== last_WriteData_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[14] = WriteData_expected_prev[14];
	end
	if (
		( WriteData_expected_prev[15] !== 1'bx ) && ( WriteData_prev[15] !== WriteData_expected_prev[15] )
		&& ((WriteData_expected_prev[15] !== last_WriteData_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WriteData_exp[15] = WriteData_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DataMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Address;
reg CLOCK;
reg MemRead;
reg MemWrite;
reg [15:0] treg_WriteData;
// wires                                               
wire [15:0] ReadData;
wire [15:0] WriteData;

wire sampler;                             

// assign statements (if any)                          
assign WriteData = treg_WriteData;
DataMemory i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.CLOCK(CLOCK),
	.MemRead(MemRead),
	.MemWrite(MemWrite),
	.ReadData(ReadData),
	.WriteData(WriteData)
);
// Address[ 7 ]
initial
begin
	Address[7] = 1'b0;
	Address[7] = #180000 1'b1;
	Address[7] = #180000 1'b0;
end 
// Address[ 6 ]
initial
begin
	Address[6] = 1'b0;
	Address[6] = #180000 1'b1;
	Address[6] = #180000 1'b0;
end 
// Address[ 5 ]
initial
begin
	Address[5] = 1'b0;
	Address[5] = #180000 1'b1;
	Address[5] = #180000 1'b0;
	Address[5] = #60000 1'b1;
	Address[5] = #250000 1'b0;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b0;
	Address[4] = #180000 1'b1;
	Address[4] = #180000 1'b0;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b0;
	Address[3] = #180000 1'b1;
	Address[3] = #180000 1'b0;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b0;
	Address[2] = #180000 1'b1;
	Address[2] = #180000 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #250000 1'b0;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
	Address[1] = #180000 1'b1;
	Address[1] = #180000 1'b0;
	Address[1] = #60000 1'b1;
	Address[1] = #250000 1'b0;
end 
// Address[ 0 ]
initial
begin
	Address[0] = 1'b0;
	Address[0] = #180000 1'b1;
	Address[0] = #180000 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// MemRead
initial
begin
	MemRead = 1'b0;
	MemRead = #160000 1'b1;
	MemRead = #40000 1'b0;
	MemRead = #90000 1'b1;
	MemRead = #60000 1'b0;
	MemRead = #210000 1'b1;
	MemRead = #80000 1'b0;
end 

// MemWrite
initial
begin
	MemWrite = 1'b0;
	MemWrite = #40000 1'b1;
	MemWrite = #30000 1'b0;
	MemWrite = #130000 1'b1;
	MemWrite = #70000 1'b0;
	MemWrite = #170000 1'b1;
	MemWrite = #50000 1'b0;
end 
// WriteData[ 15 ]
initial
begin
	treg_WriteData[15] = 1'bZ;
	treg_WriteData[15] = #20000 1'b0;
	treg_WriteData[15] = #90000 1'bZ;
	treg_WriteData[15] = #100000 1'b0;
	treg_WriteData[15] = #60000 1'bZ;
	treg_WriteData[15] = #170000 1'b0;
	treg_WriteData[15] = #60000 1'bZ;
end 
// WriteData[ 14 ]
initial
begin
	treg_WriteData[14] = 1'bZ;
	treg_WriteData[14] = #20000 1'b0;
	treg_WriteData[14] = #90000 1'bZ;
	treg_WriteData[14] = #100000 1'b0;
	treg_WriteData[14] = #60000 1'bZ;
	treg_WriteData[14] = #170000 1'b0;
	treg_WriteData[14] = #60000 1'bZ;
end 
// WriteData[ 13 ]
initial
begin
	treg_WriteData[13] = 1'bZ;
	treg_WriteData[13] = #20000 1'b0;
	treg_WriteData[13] = #90000 1'bZ;
	treg_WriteData[13] = #100000 1'b0;
	treg_WriteData[13] = #60000 1'bZ;
	treg_WriteData[13] = #170000 1'b0;
	treg_WriteData[13] = #60000 1'bZ;
end 
// WriteData[ 12 ]
initial
begin
	treg_WriteData[12] = 1'bZ;
	treg_WriteData[12] = #20000 1'b0;
	treg_WriteData[12] = #90000 1'bZ;
	treg_WriteData[12] = #100000 1'b0;
	treg_WriteData[12] = #60000 1'bZ;
	treg_WriteData[12] = #170000 1'b0;
	treg_WriteData[12] = #60000 1'bZ;
end 
// WriteData[ 11 ]
initial
begin
	treg_WriteData[11] = 1'bZ;
	treg_WriteData[11] = #20000 1'b0;
	treg_WriteData[11] = #90000 1'bZ;
	treg_WriteData[11] = #100000 1'b0;
	treg_WriteData[11] = #60000 1'bZ;
	treg_WriteData[11] = #170000 1'b0;
	treg_WriteData[11] = #60000 1'bZ;
end 
// WriteData[ 10 ]
initial
begin
	treg_WriteData[10] = 1'bZ;
	treg_WriteData[10] = #20000 1'b0;
	treg_WriteData[10] = #90000 1'bZ;
	treg_WriteData[10] = #100000 1'b0;
	treg_WriteData[10] = #60000 1'bZ;
	treg_WriteData[10] = #170000 1'b0;
	treg_WriteData[10] = #60000 1'bZ;
end 
// WriteData[ 9 ]
initial
begin
	treg_WriteData[9] = 1'bZ;
	treg_WriteData[9] = #20000 1'b1;
	treg_WriteData[9] = #90000 1'bZ;
	treg_WriteData[9] = #100000 1'b0;
	treg_WriteData[9] = #60000 1'bZ;
	treg_WriteData[9] = #170000 1'b1;
	treg_WriteData[9] = #60000 1'bZ;
end 
// WriteData[ 8 ]
initial
begin
	treg_WriteData[8] = 1'bZ;
	treg_WriteData[8] = #20000 1'b1;
	treg_WriteData[8] = #90000 1'bZ;
	treg_WriteData[8] = #100000 1'b0;
	treg_WriteData[8] = #60000 1'bZ;
	treg_WriteData[8] = #170000 1'b1;
	treg_WriteData[8] = #60000 1'bZ;
end 
// WriteData[ 7 ]
initial
begin
	treg_WriteData[7] = 1'bZ;
	treg_WriteData[7] = #20000 1'b0;
	treg_WriteData[7] = #90000 1'bZ;
	treg_WriteData[7] = #100000 1'b1;
	treg_WriteData[7] = #60000 1'bZ;
	treg_WriteData[7] = #170000 1'b0;
	treg_WriteData[7] = #60000 1'bZ;
end 
// WriteData[ 6 ]
initial
begin
	treg_WriteData[6] = 1'bZ;
	treg_WriteData[6] = #20000 1'b0;
	treg_WriteData[6] = #90000 1'bZ;
	treg_WriteData[6] = #100000 1'b1;
	treg_WriteData[6] = #60000 1'bZ;
	treg_WriteData[6] = #170000 1'b0;
	treg_WriteData[6] = #60000 1'bZ;
end 
// WriteData[ 5 ]
initial
begin
	treg_WriteData[5] = 1'bZ;
	treg_WriteData[5] = #20000 1'b0;
	treg_WriteData[5] = #90000 1'bZ;
	treg_WriteData[5] = #100000 1'b0;
	treg_WriteData[5] = #60000 1'bZ;
	treg_WriteData[5] = #170000 1'b0;
	treg_WriteData[5] = #60000 1'bZ;
end 
// WriteData[ 4 ]
initial
begin
	treg_WriteData[4] = 1'bZ;
	treg_WriteData[4] = #20000 1'b1;
	treg_WriteData[4] = #90000 1'bZ;
	treg_WriteData[4] = #100000 1'b1;
	treg_WriteData[4] = #60000 1'bZ;
	treg_WriteData[4] = #170000 1'b1;
	treg_WriteData[4] = #60000 1'bZ;
end 
// WriteData[ 3 ]
initial
begin
	treg_WriteData[3] = 1'bZ;
	treg_WriteData[3] = #20000 1'b0;
	treg_WriteData[3] = #90000 1'bZ;
	treg_WriteData[3] = #100000 1'b1;
	treg_WriteData[3] = #60000 1'bZ;
	treg_WriteData[3] = #170000 1'b1;
	treg_WriteData[3] = #60000 1'bZ;
end 
// WriteData[ 2 ]
initial
begin
	treg_WriteData[2] = 1'bZ;
	treg_WriteData[2] = #20000 1'b0;
	treg_WriteData[2] = #90000 1'bZ;
	treg_WriteData[2] = #100000 1'b1;
	treg_WriteData[2] = #60000 1'bZ;
	treg_WriteData[2] = #170000 1'b1;
	treg_WriteData[2] = #60000 1'bZ;
end 
// WriteData[ 1 ]
initial
begin
	treg_WriteData[1] = 1'bZ;
	treg_WriteData[1] = #20000 1'b0;
	treg_WriteData[1] = #90000 1'bZ;
	treg_WriteData[1] = #100000 1'b0;
	treg_WriteData[1] = #60000 1'bZ;
	treg_WriteData[1] = #170000 1'b0;
	treg_WriteData[1] = #60000 1'bZ;
end 
// WriteData[ 0 ]
initial
begin
	treg_WriteData[0] = 1'bZ;
	treg_WriteData[0] = #20000 1'b1;
	treg_WriteData[0] = #90000 1'bZ;
	treg_WriteData[0] = #100000 1'b0;
	treg_WriteData[0] = #60000 1'bZ;
	treg_WriteData[0] = #170000 1'b0;
	treg_WriteData[0] = #60000 1'bZ;
end 

DataMemory_vlg_sample_tst tb_sample (
	.Address(Address),
	.CLOCK(CLOCK),
	.MemRead(MemRead),
	.MemWrite(MemWrite),
	.WriteData(WriteData),
	.sampler_tx(sampler)
);

DataMemory_vlg_check_tst tb_out(
	.ReadData(ReadData),
	.WriteData(WriteData),
	.sampler_rx(sampler)
);
endmodule

